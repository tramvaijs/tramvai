#!/usr/bin/env node

const fs = require('fs');
const path = require('path');
const TJS = require('typescript-json-schema');

const generateSchema = async () => {
  const schemaTypeFilename = path.resolve(process.cwd(), 'src', 'schema', 'ConfigSchema.ts');
  const autogeneratedSchemaFilename = path.resolve(
    process.cwd(),
    'src',
    'schema',
    'autogeneratedSchema.json'
  );

  if (fs.existsSync(autogeneratedSchemaFilename)) {
    console.log('generate-schema: remove previous schema');
    await fs.promises.unlink(autogeneratedSchemaFilename);
  }

  const settings = {
    ref: false,
    required: true,
    noExtraProps: true,
    validationKeywords: ['title', 'patternProperties', 'if', 'then', 'else', 'cli_overridable'],
  };

  const program = TJS.programFromConfig('tsconfig.schema.json', [schemaTypeFilename]);

  console.log('generate-schema: start generate new schema');
  const schema = TJS.generateSchema(program, 'ConfigSchema', settings);

  await fs.promises.writeFile(
    path.resolve(autogeneratedSchemaFilename),
    JSON.stringify(schema, null, 2).replace(/%40/g, '@'),
    'utf-8'
  );
  console.log('generate-schema: new schema has written successfully');
};

const generatePublicSchema = async () => {
  console.log('generate-schema: start generate new public schema');

  const topLevelSchemaFilename = path.resolve(process.cwd(), 'src', 'schema', 'topLevelSchema.js');
  const autogeneratedSchemaFilename = path.resolve(
    process.cwd(),
    'src',
    'schema',
    'autogeneratedSchema.json'
  );
  const autogeneratedPublicSchemaFilename = path.resolve(process.cwd(), 'schema.json');
  const topLevelSchema = require(topLevelSchemaFilename);
  const autogeneratedSchema = require(autogeneratedSchemaFilename);
  const schema = topLevelSchema(autogeneratedSchema);

  if (fs.existsSync(autogeneratedPublicSchemaFilename)) {
    console.log('generate-schema: remove previous public schema');
    await fs.promises.unlink(autogeneratedPublicSchemaFilename);
  }

  fs.promises.writeFile(
    path.resolve(autogeneratedPublicSchemaFilename),
    JSON.stringify(schema, null, 2),
    'utf-8'
  );
  console.log('generate-schema: new public schema has written successfully');
};

const main = async () => {
  await generateSchema();
  await generatePublicSchema();
};

main();
