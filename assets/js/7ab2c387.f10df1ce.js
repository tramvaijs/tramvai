"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[813],{3905:function(e,t,r){r.d(t,{Zo:function(){return p},kt:function(){return d}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function o(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=n.createContext({}),u=function(e){var t=n.useContext(s),r=t;return e&&(r="function"==typeof e?e(t):o(o({},t),e)),r},p=function(e){var t=u(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),m=u(r),d=a,f=m["".concat(s,".").concat(d)]||m[d]||c[d]||i;return r?n.createElement(f,o(o({ref:t},p),{},{components:r})):n.createElement(f,o({ref:t},p))}));function d(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var i=r.length,o=new Array(i);o[0]=m;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,o[1]=l;for(var u=2;u<i;u++)o[u]=r[u];return n.createElement.apply(null,o)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},5162:function(e,t,r){r.d(t,{Z:function(){return o}});var n=r(7294),a=r(6010),i="tabItem_Ymn6";function o(e){let{children:t,hidden:r,className:o}=e;return n.createElement("div",{role:"tabpanel",className:(0,a.Z)(i,o),hidden:r},t)}},4866:function(e,t,r){r.d(t,{Z:function(){return N}});var n=r(7462),a=r(7294),i=r(6010),o=r(2466),l=r(6550),s=r(1980),u=r(7392),p=r(12);function c(e){return function(e){return a.Children.map(e,(e=>{if((0,a.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:t,label:r,attributes:n,default:a}}=e;return{value:t,label:r,attributes:n,default:a}}))}function m(e){const{values:t,children:r}=e;return(0,a.useMemo)((()=>{const e=t??c(r);return function(e){const t=(0,u.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,r])}function d(e){let{value:t,tabValues:r}=e;return r.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:r}=e;const n=(0,l.k6)(),i=function(e){let{queryString:t=!1,groupId:r}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!r)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return r??null}({queryString:t,groupId:r});return[(0,s._X)(i),(0,a.useCallback)((e=>{if(!i)return;const t=new URLSearchParams(n.location.search);t.set(i,e),n.replace({...n.location,search:t.toString()})}),[i,n])]}function g(e){const{defaultValue:t,queryString:r=!1,groupId:n}=e,i=m(e),[o,l]=(0,a.useState)((()=>function(e){let{defaultValue:t,tabValues:r}=e;if(0===r.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:r}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${r.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const n=r.find((e=>e.default))??r[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:i}))),[s,u]=f({queryString:r,groupId:n}),[c,g]=function(e){let{groupId:t}=e;const r=function(e){return e?`docusaurus.tab.${e}`:null}(t),[n,i]=(0,p.Nk)(r);return[n,(0,a.useCallback)((e=>{r&&i.set(e)}),[r,i])]}({groupId:n}),h=(()=>{const e=s??c;return d({value:e,tabValues:i})?e:null})();(0,a.useLayoutEffect)((()=>{h&&l(h)}),[h]);return{selectedValue:o,selectValue:(0,a.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),u(e),g(e)}),[u,g,i]),tabValues:i}}var h=r(2389),v="tabList__CuJ",y="tabItem_LNqP";function b(e){let{className:t,block:r,selectedValue:l,selectValue:s,tabValues:u}=e;const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,o.o5)(),m=e=>{const t=e.currentTarget,r=p.indexOf(t),n=u[r].value;n!==l&&(c(t),s(n))},d=e=>{var t;let r=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const t=p.indexOf(e.currentTarget)+1;r=p[t]??p[0];break}case"ArrowLeft":{const t=p.indexOf(e.currentTarget)-1;r=p[t]??p[p.length-1];break}}null==(t=r)||t.focus()};return a.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":r},t)},u.map((e=>{let{value:t,label:r,attributes:o}=e;return a.createElement("li",(0,n.Z)({role:"tab",tabIndex:l===t?0:-1,"aria-selected":l===t,key:t,ref:e=>p.push(e),onKeyDown:d,onClick:m},o,{className:(0,i.Z)("tabs__item",y,null==o?void 0:o.className,{"tabs__item--active":l===t})}),r??t)})))}function k(e){let{lazy:t,children:r,selectedValue:n}=e;if(r=Array.isArray(r)?r:[r],t){const e=r.find((e=>e.props.value===n));return e?(0,a.cloneElement)(e,{className:"margin-top--md"}):null}return a.createElement("div",{className:"margin-top--md"},r.map(((e,t)=>(0,a.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=g(e);return a.createElement("div",{className:(0,i.Z)("tabs-container",v)},a.createElement(b,(0,n.Z)({},e,t)),a.createElement(k,(0,n.Z)({},e,t)))}function N(e){const t=(0,h.Z)();return a.createElement(w,(0,n.Z)({key:String(t)},e))}},5909:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return u},toc:function(){return c}});var n=r(7462),a=(r(7294),r(3905)),i=r(4866),o=r(5162);const l={},s=void 0,u={unversionedId:"references/tramvai/test/playwright",id:"references/tramvai/test/playwright",title:"playwright",description:"Set of helpers for using playwright in the integration tests",source:"@site/tmp-docs/references/tramvai/test/playwright.md",sourceDirName:"references/tramvai/test",slug:"/references/tramvai/test/playwright",permalink:"/docs/references/tramvai/test/playwright",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/tramvai/test/playwright.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"mocks",permalink:"/docs/references/tramvai/test/mocks"},next:{title:"puppeteer",permalink:"/docs/references/tramvai/test/puppeteer"}},p={},c=[{value:"Installation",id:"installation",level:2},{value:"Usage",id:"usage",level:2},{value:"Configuration",id:"configuration",level:3},{value:"Testing",id:"testing",level:3}],m={toc:c};function d(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},m,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"Set of helpers for using ",(0,a.kt)("a",{parentName:"p",href:"https://playwright.dev"},"playwright")," in the integration tests"),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},(0,a.kt)("inlineCode",{parentName:"p"},"Playwright")," should be installed separately")),(0,a.kt)("h2",{id:"installation"},"Installation"),(0,a.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,a.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev @tramvai/test-pw\n"))),(0,a.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev @tramvai/test-pw\n")))),(0,a.kt)("h2",{id:"usage"},"Usage"),(0,a.kt)("h3",{id:"configuration"},"Configuration"),(0,a.kt)("p",null,"Create file ",(0,a.kt)("inlineCode",{parentName:"p"},"playwright.config.ts")," with defaults from ",(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/test-pw")," package:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="playwright.config.ts"',title:'"playwright.config.ts"'},"import { createPlaywrightConfig } from '@tramvai/test-pw';\n\nexport default createPlaywrightConfig();\n")),(0,a.kt)("p",null,"You can always extend default config, here is ",(0,a.kt)("inlineCode",{parentName:"p"},"createPlaywrightConfig")," type definition:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"// passed configuration object will be merged with defaults\ntype createPlaywrightConfig = (config: PlaywrightTestConfig) => PlaywrightTestConfig;\n")),(0,a.kt)("h3",{id:"testing"},"Testing"),(0,a.kt)("admonition",{type:"tip"},(0,a.kt)("p",{parentName:"admonition"},"Use case for this section and ",(0,a.kt)("inlineCode",{parentName:"p"},"startAppFixture")," - monorepo with many tramvai modules and example applications, where you need to test independent features."),(0,a.kt)("p",{parentName:"admonition"},"All usage of ",(0,a.kt)("inlineCode",{parentName:"p"},"startAppFixture")," in different workers will run development build, which might not be optimal for tests execution time, if you want to test the same app in different cases."),(0,a.kt)("p",{parentName:"admonition"},"For real applications, prefer to run application once as ",(0,a.kt)("a",{parentName:"p",href:"https://playwright.dev/docs/test-webserver"},"web server")," or manually and pass ",(0,a.kt)("inlineCode",{parentName:"p"},"baseUrl")," after.")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/test-pw")," provide a useful fixture for application start (local server in development mode) and testing - ",(0,a.kt)("inlineCode",{parentName:"p"},"startAppFixture"),". This fixture use ",(0,a.kt)("inlineCode",{parentName:"p"},"startCli")," method from ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/tramvai/test/integration"},"@tramvai/test-integration")," package."),(0,a.kt)("p",null,"First, you need to add and configure this fixture for application tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="__integration__/test-fixture.ts"',title:'"__integration__/test-fixture.ts"'},"import path from 'path';\nimport { test as base } from '@playwright/test';\nimport type { StartAppTypes } from '@tramvai/test-pw';\nimport { startAppFixture } from '@tramvai/test-pw';\n\ntype TestFixture = {};\n\ntype WorkerFixture = {\n  app: StartAppTypes.TestApp;\n  appTarget: StartAppTypes.AppTarget;\n  startOptions: StartAppTypes.StartOptions;\n};\n\nexport const test = base.extend<TestFixture, WorkerFixture>({\n  appTarget: [\n    // provide application name and directory\n    {\n      target: 'appName',\n      cwd: path.resolve(__dirname, '..'),\n    },\n    { scope: 'worker', auto: true, option: true },\n  ],\n  // any `startCli` parameters\n  startOptions: [{\n    env: {\n      SOME_MOCKED_API: 'xxx'\n    },\n  }, { scope: 'worker', auto: true, option: true }],\n\n  app: startAppFixture,\n});\n")),(0,a.kt)("p",null,"Then, use the ",(0,a.kt)("inlineCode",{parentName:"p"},"app")," object in integration tests:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="__integration__/appName.integration.ts"',title:'"__integration__/appName.integration.ts"'},"import { expect } from '@playwright/test';\nimport { test } from './test-fixture';\n\ntest.describe('examples/app', async () => {\n  test('Navigation is visible', async ({ app, page }) => {\n    await page.goto(app.serverUrl);\n\n    expect(page.getByRole('navigation')).toBeVisible();\n  });\n});\n")),(0,a.kt)("p",null,"You can find more info about ",(0,a.kt)("inlineCode",{parentName:"p"},"app")," object in our ",(0,a.kt)("a",{parentName:"p",href:"/docs/guides/testing#integration-tests"},"Testing Guide")))}d.isMDXComponent=!0}}]);