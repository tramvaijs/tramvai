"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1121],{3905:function(e,t,r){r.d(t,{Zo:function(){return c},kt:function(){return m}});var n=r(7294);function a(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){a(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,a=function(e,t){if(null==e)return{};var r,n,a={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(a[r]=e[r]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var p=n.createContext({}),s=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},c=function(e){var t=s(e.components);return n.createElement(p.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},d=n.forwardRef((function(e,t){var r=e.components,a=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=s(r),m=a,f=d["".concat(p,".").concat(m)]||d[m]||u[m]||o;return r?n.createElement(f,i(i({ref:t},c),{},{components:r})):n.createElement(f,i({ref:t},c))}));function m(e,t){var r=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var s=2;s<o;s++)i[s]=r[s];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}d.displayName="MDXCreateElement"},9196:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return s}});var n=r(7462),a=(r(7294),r(3905));const o={id:"quick-start",title:"Quick Start"},i=void 0,l={unversionedId:"get-started/quick-start",id:"get-started/quick-start",title:"Quick Start",description:"Try it on CodeSandbox!",source:"@site/tmp-docs/01-get-started/02-quick-start.md",sourceDirName:"01-get-started",slug:"/get-started/quick-start",permalink:"/docs/get-started/quick-start",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/01-get-started/02-quick-start.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{id:"quick-start",title:"Quick Start"},sidebar:"sidebar",previous:{title:"Overview",permalink:"/docs/get-started/overview"},next:{title:"Create application",permalink:"/docs/tutorial/new-app"}},p={},s=[{value:"Prerequisites",id:"prerequisites",level:2},{value:"New application",id:"new-application",level:2},{value:"Development",id:"development",level:2},{value:"Application structure",id:"application-structure",level:2},{value:"Repository type",id:"repository-type",level:3},{value:"Multirepo",id:"multirepo",level:4},{value:"Monorepo",id:"monorepo",level:4},{value:"Blocks",id:"blocks",level:3},{value:"Application",id:"application",level:4}],c={toc:s};function u(e){let{components:t,...r}=e;return(0,a.kt)("wrapper",(0,n.Z)({},c,r,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("a",{parentName:"p",href:"https://codesandbox.io/s/tramvai-new-qgk90?fontsize=14&hidenavigation=1&theme=dark"},(0,a.kt)("img",{parentName:"a",src:"https://codesandbox.io/static/img/play-codesandbox.svg",alt:"Try it on CodeSandbox!"}))),(0,a.kt)("p",null,"Tramvai provides a powerful CLI for build and development processes - ",(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")),(0,a.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("a",{parentName:"li",href:"https://nodejs.org/en/download"},"Node.js version ",(0,a.kt)("inlineCode",{parentName:"a"},"16+")))),(0,a.kt)("h2",{id:"new-application"},"New application"),(0,a.kt)("p",null,"You can generate a new application and install required dependencies by one command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-sh"},"npm init @tramvai@latest awesome-app\n")),(0,a.kt)("p",null,"After starting, you need to select settings - application type, project template, package manager and testing framework. For a quick start, the default settings are fine."),(0,a.kt)("h2",{id:"development"},"Development"),(0,a.kt)("p",null,"Now we need to run our application in watch mode, for easy development and to check that our project is working. To do this, execute the command:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"cd awesome-app && npm start\n")),(0,a.kt)("p",null,"This command will start a server in dev mode that will monitor the server and client code. After executing the command, you can go to the address ",(0,a.kt)("inlineCode",{parentName:"p"},"http://localhost:3000/")," and see the lifted clean application."),(0,a.kt)("h2",{id:"application-structure"},"Application structure"),(0,a.kt)("p",null,"A quick overview of the structure of the application that generates by ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai new")," command. At the same time, we support both monorepositories and repositories with one application."),(0,a.kt)("p",null,"We recommend follow ",(0,a.kt)("a",{parentName:"p",href:"https://feature-sliced.design/"},"feature-sliced methodology")," guidlines to structure application code."),(0,a.kt)("h3",{id:"repository-type"},"Repository type"),(0,a.kt)("h4",{id:"multirepo"},"Multirepo"),(0,a.kt)("p",null,"The repository structure is designed for one application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"root-directory\n\u251c\u2500\u2500 tramvai.json - project configuration for `@tramvai/cli`\n\u251c\u2500\u2500 env.development.js - environment variables used for local builds of the project\n\u2514\u2500\u2500 src - application code directory\n    \u2514\u2500\u2500 App block\n")),(0,a.kt)("h4",{id:"monorepo"},"Monorepo"),(0,a.kt)("p",null,"The repository structure is designed for the presence of several applications, and separate shared libraries"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"root-directory\n\u251c\u2500\u2500 tramvai.json - project configuration for `@tramvai/cli`\n\u251c\u2500\u2500 env.development.js - environment variables used for local builds of the project\n\u251c\u2500\u2500 apps - directory with applications\n\u2502   \u251c\u2500\u2500 App block\n\u2502   \u251c\u2500\u2500 App block\n\u2514\u2500\u2500 packages - a directory with various libraries / modules that will be shared between applications\n    \u251c\u2500\u2500 Lib block\n    \u2514\u2500\u2500 Lib block\n")),(0,a.kt)("h3",{id:"blocks"},"Blocks"),(0,a.kt)("h4",{id:"application"},"Application"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"app-directory\n\u251c\u2500\u2500 index.ts - application entry point, where all tramvai modules are connected\n\u251c\u2500\u2500 polyfill.ts - polyfills used by the application (absent by default)\n\u251c\u2500\u2500 postcss.js - postcss configuration object\n\u251c\u2500\u2500 shared - reused modules of the application\n\u2514\u2500\u2500 routes - application pages\n")))}u.isMDXComponent=!0}}]);