"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[9248],{3905:(e,t,r)=>{r.d(t,{Zo:()=>m,kt:()=>f});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function s(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var c=n.createContext({}),u=function(e){var t=n.useContext(c),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},m=function(e){var t=u(e.components);return n.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},l=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,m=s(e,["components","mdxType","originalType","parentName"]),l=u(r),f=o,d=l["".concat(c,".").concat(f)]||l[f]||p[f]||a;return r?n.createElement(d,i(i({ref:t},m),{},{components:r})):n.createElement(d,i({ref:t},m))}));function f(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=r[u];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}l.displayName="MDXCreateElement"},823:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>s,toc:()=>u});var n=r(7462),o=(r(7294),r(3905));const a={id:"how-measure-navigation",title:"How to measure SPA navigation?"},i=void 0,s={unversionedId:"how-to/how-measure-navigation",id:"how-to/how-measure-navigation",title:"How to measure SPA navigation?",description:"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in this part of the documentation.",source:"@site/tmp-docs/how-to/how-measure-navigation.md",sourceDirName:"how-to",slug:"/how-to/how-measure-navigation",permalink:"/docs/how-to/how-measure-navigation",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/how-to/how-measure-navigation.md",tags:[],version:"current",frontMatter:{id:"how-measure-navigation",title:"How to measure SPA navigation?"},sidebar:"sidebar",previous:{title:"How to debug modules?",permalink:"/docs/how-to/how-debug-modules"},next:{title:"react-query-usage",permalink:"/docs/how-to/react-query-usage"}},c={},u=[],m={toc:u};function p({components:e,...t}){return(0,o.kt)("wrapper",(0,n.Z)({},m,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in ",(0,o.kt)("a",{parentName:"p",href:"/docs/features/routing/flow#client-spa-navigation"},"this part")," of the documentation."),(0,o.kt)("p",null,"So, if we want to measure how long it took us to go from one page to another, we can use the following recipe:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { commandLineListTokens, declareModule, provide } from '@tramvai/core';\nimport { ROUTER_TOKEN } from '@tramvai/tokens-router';\n\n/*\n * You can use your own marks and measures; this is only an example\n * */\nexport const SpaTransitionPerformanceMetrics = declareModule({\n  name: 'SpaTransitionPerformanceMetrics',\n  providers: [\n    provide({\n      provide: commandLineListTokens.customerStart,\n      multi: true,\n      useFactory: ({ router }) => {\n        return () => {\n          router.registerHook('beforeResolve', ({ key }) => {\n            const startKey = `navigation_start:${key}`;\n            performance.mark(startKey);\n          });\n\n          router.registerSyncHook('change', ({ key }) => {\n            const startKey = `navigation_start:${key}`;\n            const endKey = `navigation_end:${key}`;\n            const measureKey = `spa_navigation:${key}`;\n\n            afterFrame(() => {\n              if (process.env.__TRAMVAI_CONCURRENT_FEATURES) {\n                afterFrame(() => {\n                  performance.mark(endKey);\n                  performance.measure(measureKey, startKey, endKey);\n\n                  performance.clearMeasures();\n                  [startKey, endKey].forEach((name) => performance.clearMarks(name));\n                });\n              } else {\n                performance.mark(endKey);\n                performance.measure(measureKey, startKey, endKey);\n\n                performance.clearMeasures();\n                [startKey, endKey].forEach((name) => performance.clearMarks(name));\n              }\n            });\n          });\n        };\n      },\n      deps: {\n        router: ROUTER_TOKEN,\n      },\n    }),\n  ],\n});\n")),(0,o.kt)("p",null,"Be careful, current recipe is inaccurate in terms of measure time for spa-navigation. But it is something you can use to compare relative metrics while boosting performance of your pages."))}p.isMDXComponent=!0}}]);