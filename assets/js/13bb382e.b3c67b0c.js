"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[2179],{3905:function(e,n,r){r.d(n,{Zo:function(){return c},kt:function(){return m}});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function i(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function l(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var s=t.createContext({}),p=function(e){var n=t.useContext(s),r=n;return e&&(r="function"==typeof e?e(n):i(i({},n),e)),r},c=function(e){var n=p(e.components);return t.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),d=p(r),m=a,h=d["".concat(s,".").concat(m)]||d[m]||u[m]||o;return r?t.createElement(h,i(i({ref:n},c),{},{components:r})):t.createElement(h,i({ref:n},c))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,i=new Array(o);i[0]=d;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,i[1]=l;for(var p=2;p<o;p++)i[p]=r[p];return t.createElement.apply(null,i)}return t.createElement.apply(null,r)}d.displayName="MDXCreateElement"},7778:function(e,n,r){r.r(n),r.d(n,{assets:function(){return s},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var t=r(7462),a=(r(7294),r(3905));const o={title:"@tramvai/react",sidebar_position:2},i=void 0,l={unversionedId:"references/tramvai/react",id:"references/tramvai/react",title:"@tramvai/react",description:"@tramvai/react - library for integrating tramvai features with React components",source:"@site/tmp-docs/references/tramvai/react.md",sourceDirName:"references/tramvai",slug:"/references/tramvai/react",permalink:"/docs/references/tramvai/react",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/tramvai/react.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{title:"@tramvai/react",sidebar_position:2},sidebar:"sidebar",previous:{title:"@tramvai/core",permalink:"/docs/references/tramvai/core"},next:{title:"@tramvai/papi",permalink:"/docs/references/tramvai/papi"}},s={},p=[{value:"Install",id:"install",level:2},{value:"DI",id:"di",level:2},{value:"useDi",id:"usedi",level:3},{value:"withDi",id:"withdi",level:3},{value:"useDiContainer",id:"usedicontainer",level:3},{value:"Error",id:"error",level:2},{value:"ErrorBoundary",id:"errorboundary",level:3},{value:"FallbackError",id:"fallbackerror",level:3},{value:"withError",id:"witherror",level:3},{value:"lazy",id:"lazy",level:2},{value:"Handling chunk loading errors",id:"handling-chunk-loading-errors",level:3},{value:"Using Suspense with lazy components",id:"using-suspense-with-lazy-components",level:3}],c={toc:p};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},c,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/react")," - library for integrating tramvai features with ",(0,a.kt)("inlineCode",{parentName:"p"},"React")," components"),(0,a.kt)("h2",{id:"install"},"Install"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-bash"},"npm i --save @tramvai/react\n")),(0,a.kt)("h2",{id:"di"},"DI"),(0,a.kt)("p",null,"When creating components, you may need to get data from di, for this there is a hook ",(0,a.kt)("inlineCode",{parentName:"p"},"useDi")," and HoC ",(0,a.kt)("inlineCode",{parentName:"p"},"withDi")),(0,a.kt)("h3",{id:"usedi"},"useDi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type useDi = (deps: Record<string, string | Token>) => Record<string, any>;\n")),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type useDi = (dep: string | Token) => any;\n")),(0,a.kt)("p",null,"A hook into which we can pass both an object with the required dependencies and an object with data will be returned to us, as well as a single token, where the result will be returned to us. When we call ",(0,a.kt)("inlineCode",{parentName:"p"},"useDi"),", we get data from di and if we don't find data in di, an error will occur."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport { useDi } from '@tramvai/react';\n\nconst MyComponent = () => {\n  const { logger } = useDi({ logger: 'logger' }); // pass the object\n  const Region = useDi(regionToken); // pass a single token\n\n  logger.info('text');\n\n  return (\n    <div>\n      Component\n      <Region />\n    </div>\n  );\n};\n")),(0,a.kt)("h3",{id:"withdi"},"withDi"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type withDi = (\n  deps: Record<string, string | Token>\n) => (wrapper: React.ReactElement<any>) => React.ReactElement<any>;\n")),(0,a.kt)("p",null,"A HoC that allows you to wrap any components, get data from ",(0,a.kt)("inlineCode",{parentName:"p"},"DI")," and pass the result with dependencies to the props of the component"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-javascript"},"import React from 'react';\nimport { withDi } from '@tramvai/react';\n\n@withDi({ logger: LOGGER_TOKEN })\nclass BoxyPage extends Component {\n  render() {\n    this.props.logger.info('text');\n    return <div>Component</div>;\n  }\n}\n")),(0,a.kt)("h3",{id:"usedicontainer"},"useDiContainer"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"type useDiContainer = () => DI.Container;\n")),(0,a.kt)("p",null,"Getting an instance of a DI container that has been added to the application context."),(0,a.kt)("p",null,"It is better not to use this hook, as it is very low-level and is intended for developing new hooks"),(0,a.kt)("h2",{id:"error"},"Error"),(0,a.kt)("p",null,"To handle errors during rendering, React uses ",(0,a.kt)("a",{parentName:"p",href:"https://ru.reactjs.org/docs/error-boundaries.html#introducing-error-boundaries"},"Error Boundary"),". This package provides its own version of Error Boundary which will log an error through a generic logger and display a stub for the wrapped component if an error occurs."),(0,a.kt)("h3",{id:"errorboundary"},"ErrorBoundary"),(0,a.kt)("p",null,"Error Boundary component that monitors errors down the tree and, in case of a render error, will log an error and display the ",(0,a.kt)("inlineCode",{parentName:"p"},"fallbackComponent")," component (passed as a props, by default it is a FallbackError from this package) instead of the fallen render subtree."),(0,a.kt)("p",null,"You can override the ",(0,a.kt)("inlineCode",{parentName:"p"},"fallbackComponent")," through the ",(0,a.kt)("inlineCode",{parentName:"p"},"ERROR_BOUNDARY_FALLBACK_COMPONENT_TOKEN")," provider."),(0,a.kt)("h3",{id:"fallbackerror"},"FallbackError"),(0,a.kt)("p",null,"Component used by default as a stub for a subtree in which a render error occurred"),(0,a.kt)("h3",{id:"witherror"},"withError"),(0,a.kt)("p",null,"Hook wrapping component in ErrorBoundary."),(0,a.kt)("h2",{id:"lazy"},"lazy"),(0,a.kt)("p",null,"To dynamically import components with SSR support, there is a high order ",(0,a.kt)("inlineCode",{parentName:"p"},"lazy")," component:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { lazy } from '@tramvai/react';\n\nconst LazyComponent = lazy(() => import('./components/foo'), {\n  loading: <div>Loading...</div>,\n});\n\n<LazyComponent />;\n")),(0,a.kt)("h3",{id:"handling-chunk-loading-errors"},"Handling chunk loading errors"),(0,a.kt)("p",null,"We suggest to use ",(0,a.kt)("inlineCode",{parentName:"p"},"@loadable")," ",(0,a.kt)("a",{parentName:"p",href:"https://loadable-components.com/docs/error-boundaries/"},"approach"),", which assumes, that you must wrap lazy components in ErrorBoundary:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { lazy, UniversalErrorBoundary } from '@tramvai/react';\n\nconst Component = lazy(() => import('./Component'));\n\nconst ComponentWrapper = () => {\n  return (\n    // feel free to use your own implementation\n    <UniversalErrorBoundary error={null} fallback={() => null}>\n      <Component />\n    </UniversalErrorBoundary>\n  );\n};\n")),(0,a.kt)("h3",{id:"using-suspense-with-lazy-components"},"Using Suspense with lazy components"),(0,a.kt)("p",null,"If you are using React 18, you can display fallback UI for lazy component while it is loading. To do so, you need to pass ",(0,a.kt)("inlineCode",{parentName:"p"},"suspense: true")," to lazy method options:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Suspense } from 'react';\nimport { lazy } from '@tramvai/react';\n\nconst Component = lazy(() => import('./Component'), { suspense: true });\n\nconst ComponentWrapper = () => {\n  return (\n    <Suspense fallback={<h4>Loading...</h4>}>\n      <Component />\n    </Suspense>\n  );\n};\n")),(0,a.kt)("p",null,"See more in our ",(0,a.kt)("a",{parentName:"p",href:"https://tramvai.dev/docs/guides/react-18#error-handling"},"React 18 guide"),"!"))}u.isMDXComponent=!0}}]);