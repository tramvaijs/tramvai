"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[3580],{3905:function(e,n,t){t.d(n,{Zo:function(){return c},kt:function(){return d}});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var s=a.createContext({}),p=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(s.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=p(t),d=r,k=m["".concat(s,".").concat(d)]||m[d]||u[d]||i;return t?a.createElement(k,o(o({ref:n},c),{},{components:t})):a.createElement(k,o({ref:n},c))}));function d(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,o=new Array(i);o[0]=m;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:r,o[1]=l;for(var p=2;p<i;p++)o[p]=t[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},5162:function(e,n,t){t.d(n,{Z:function(){return o}});var a=t(7294),r=t(6010),i="tabItem_Ymn6";function o(e){let{children:n,hidden:t,className:o}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(i,o),hidden:t},n)}},4866:function(e,n,t){t.d(n,{Z:function(){return y}});var a=t(7462),r=t(7294),i=t(6010),o=t(2466),l=t(6550),s=t(1980),p=t(7392),c=t(12);function u(e){return function(e){return r.Children.map(e,(e=>{if((0,r.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((e=>{let{props:{value:n,label:t,attributes:a,default:r}}=e;return{value:n,label:t,attributes:a,default:r}}))}function m(e){const{values:n,children:t}=e;return(0,r.useMemo)((()=>{const e=n??u(t);return function(e){const n=(0,p.l)(e,((e,n)=>e.value===n.value));if(n.length>0)throw new Error(`Docusaurus error: Duplicate values "${n.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[n,t])}function d(e){let{value:n,tabValues:t}=e;return t.some((e=>e.value===n))}function k(e){let{queryString:n=!1,groupId:t}=e;const a=(0,l.k6)(),i=function(e){let{queryString:n=!1,groupId:t}=e;if("string"==typeof n)return n;if(!1===n)return null;if(!0===n&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:n,groupId:t});return[(0,s._X)(i),(0,r.useCallback)((e=>{if(!i)return;const n=new URLSearchParams(a.location.search);n.set(i,e),a.replace({...a.location,search:n.toString()})}),[i,a])]}function w(e){const{defaultValue:n,queryString:t=!1,groupId:a}=e,i=m(e),[o,l]=(0,r.useState)((()=>function(e){let{defaultValue:n,tabValues:t}=e;if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(n){if(!d({value:n,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${n}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return n}const a=t.find((e=>e.default))??t[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:n,tabValues:i}))),[s,p]=k({queryString:t,groupId:a}),[u,w]=function(e){let{groupId:n}=e;const t=function(e){return e?`docusaurus.tab.${e}`:null}(n),[a,i]=(0,c.Nk)(t);return[a,(0,r.useCallback)((e=>{t&&i.set(e)}),[t,i])]}({groupId:a}),f=(()=>{const e=s??u;return d({value:e,tabValues:i})?e:null})();(0,r.useLayoutEffect)((()=>{f&&l(f)}),[f]);return{selectedValue:o,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:i}))throw new Error(`Can't select invalid tab value=${e}`);l(e),p(e),w(e)}),[p,w,i]),tabValues:i}}var f=t(2389),h="tabList__CuJ",g="tabItem_LNqP";function b(e){let{className:n,block:t,selectedValue:l,selectValue:s,tabValues:p}=e;const c=[],{blockElementScrollPositionUntilNextRender:u}=(0,o.o5)(),m=e=>{const n=e.currentTarget,t=c.indexOf(n),a=p[t].value;a!==l&&(u(n),s(a))},d=e=>{var n;let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=c.indexOf(e.currentTarget)+1;t=c[n]??c[0];break}case"ArrowLeft":{const n=c.indexOf(e.currentTarget)-1;t=c[n]??c[c.length-1];break}}null==(n=t)||n.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,i.Z)("tabs",{"tabs--block":t},n)},p.map((e=>{let{value:n,label:t,attributes:o}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:l===n?0:-1,"aria-selected":l===n,key:n,ref:e=>c.push(e),onKeyDown:d,onClick:m},o,{className:(0,i.Z)("tabs__item",g,null==o?void 0:o.className,{"tabs__item--active":l===n})}),t??n)})))}function v(e){let{lazy:n,children:t,selectedValue:a}=e;if(t=Array.isArray(t)?t:[t],n){const e=t.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},t.map(((e,n)=>(0,r.cloneElement)(e,{key:n,hidden:e.props.value!==a}))))}function N(e){const n=w(e);return r.createElement("div",{className:(0,i.Z)("tabs-container",h)},r.createElement(b,(0,a.Z)({},e,n)),r.createElement(v,(0,a.Z)({},e,n)))}function y(e){const n=(0,f.Z)();return r.createElement(N,(0,a.Z)({key:String(n)},e))}},5898:function(e,n,t){t.r(n),t.d(n,{assets:function(){return c},contentTitle:function(){return s},default:function(){return d},frontMatter:function(){return l},metadata:function(){return p},toc:function(){return u}});var a=t(7462),r=(t(7294),t(3905)),i=t(4866),o=t(5162);const l={id:"pwa",title:"PWA (Progressive Web App)"},s=void 0,p={unversionedId:"features/pwa",id:"features/pwa",title:"PWA (Progressive Web App)",description:"Introduction",source:"@site/tmp-docs/03-features/017-pwa.md",sourceDirName:"03-features",slug:"/features/pwa",permalink:"/docs/features/pwa",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/03-features/017-pwa.md",tags:[],version:"current",sidebarPosition:17,frontMatter:{id:"pwa",title:"PWA (Progressive Web App)"},sidebar:"sidebar",previous:{title:"Papi (API Routes)",permalink:"/docs/features/papi"},next:{title:"Introduction to tramvai",permalink:"/docs/concepts/overview"}},c={},u=[{value:"Introduction",id:"introduction",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Workbox",id:"workbox",level:3},{value:"Webmanifest",id:"webmanifest",level:3},{value:"Meta",id:"meta",level:3},{value:"Icons",id:"icons",level:3},{value:"Prerequisites",id:"prerequisites",level:2},{value:"Usage",id:"usage",level:2},{value:"Service Worker",id:"service-worker",level:3},{value:"Registration scope",id:"registration-scope",level:4},{value:"Source and output filenames",id:"source-and-output-filenames",level:4},{value:"Precaching",id:"precaching",level:3},{value:"Control precached assets",id:"control-precached-assets",level:4},{value:"Webmanifest",id:"webmanifest-1",level:3},{value:"Output filename",id:"output-filename",level:4},{value:"Content",id:"content",level:4},{value:"Icons",id:"icons-1",level:3},{value:"Sizes",id:"sizes",level:4},{value:"Output directory",id:"output-directory",level:4},{value:"Meta",id:"meta-1",level:3},{value:"PWA Recipes",id:"pwa-recipes",level:3},{value:"Installation",id:"installation",level:4},{value:"Cache static assets",id:"cache-static-assets",level:4},{value:"Cache images",id:"cache-images",level:4},{value:"Cache fonts",id:"cache-fonts",level:4},{value:"Cache pages",id:"cache-pages",level:4},{value:"How to",id:"how-to",level:2},{value:"How to use custom service worker or webmanifest file",id:"how-to-use-custom-service-worker-or-webmanifest-file",level:3},{value:"How to send messages to Service Worker?",id:"how-to-send-messages-to-service-worker",level:3},{value:"How to disable Service Worker generation in development mode?",id:"how-to-disable-service-worker-generation-in-development-mode",level:3},{value:"How to precache webmanifest and critical assets?",id:"how-to-precache-webmanifest-and-critical-assets",level:3}],m={toc:u};function d(e){let{components:n,...t}=e;return(0,r.kt)("wrapper",(0,a.Z)({},m,t,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"introduction"},"Introduction"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," provides complete support for ",(0,r.kt)("a",{parentName:"p",href:"https://web.dev/progressive-web-apps/"},"Progressive Web Apps")," (PWA) features."),(0,r.kt)("p",null,"Main PWA features separated into a few modules:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#workbox"},"Workbox")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#webmanifest"},"Webmanifest")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#meta"},"Meta")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"#icons"},"Icons"))),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("h3",{id:"workbox"},"Workbox"),(0,r.kt)("p",null,"Workbox module based on awesome ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/"},"workbox")," library."),(0,r.kt)("p",null,"This module responsible for ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/API/Service_Worker_API"},"Service Worker")," (SW) generation and registration. For SW generation, we use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/reference/workbox-webpack-plugin/#type-InjectManifest"},(0,r.kt)("inlineCode",{parentName:"a"},"InjectManifest")," workbox webpack plugin"),". On the client-side, we use ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/modules/workbox-window/"},(0,r.kt)("inlineCode",{parentName:"a"},"workbox-window")," library")," for SW registration."),(0,r.kt)("p",null,"Main purpose of ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectManifest")," integration is to inject information about application assets to source SW file. It allows us to ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/modules/workbox-precaching/"},"precache all critical application assets"),"."),(0,r.kt)("p",null,"Service Worker generation process is integrated with ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," development server. It means that you don't need always to run ",(0,r.kt)("inlineCode",{parentName:"p"},"build")," command to generate SW, but this behavior is configurable."),(0,r.kt)("p",null,"For production build, SW will be generated in client build directory with other assets. If you have enabled ",(0,r.kt)("a",{parentName:"p",href:"/docs/how-to/how-enable-modern"},"modern build"),", then SW will be generated for both modern (with ",(0,r.kt)("inlineCode",{parentName:"p"},".modern.js")," suffix) and legacy bundles."),(0,r.kt)("h3",{id:"webmanifest"},"Webmanifest"),(0,r.kt)("p",null,"Another important part of PWA is ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Manifest"},"Web Application Manifest"),"."),(0,r.kt)("p",null,"This module allows you to generate webmanifest file as part of the build process. Generated file can have ",(0,r.kt)("inlineCode",{parentName:"p"},".json")," or ",(0,r.kt)("inlineCode",{parentName:"p"},".webmanifest")," extension."),(0,r.kt)("p",null,"On application pages, webmanifest will be automatically connected through ",(0,r.kt)("inlineCode",{parentName:"p"},"link")," tag with rel ",(0,r.kt)("inlineCode",{parentName:"p"},"manifest"),"."),(0,r.kt)("p",null,"All webmanifest configuration is placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json")," configuration file."),(0,r.kt)("h3",{id:"meta"},"Meta"),(0,r.kt)("p",null,"This module simplifies the process of adding ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/gokulkrishh/awesome-meta-and-manifest"},"PWA specific meta tags")," to the application pages."),(0,r.kt)("p",null,"All PWA meta configuration basically is placed in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json")," configuration file."),(0,r.kt)("h3",{id:"icons"},"Icons"),(0,r.kt)("p",null,"PWA can be installed on endless set of devices, ",(0,r.kt)("a",{parentName:"p",href:"https://developer.mozilla.org/en-US/docs/Web/Progressive_web_apps/How_to/Define_app_icons"},"and all of them can have different requirements for installed app or startup screen icons"),"."),(0,r.kt)("p",null,"This module allows you to generate all required icons for PWA and automatically connect them to the webmanifest."),(0,r.kt)("p",null,"For source image processing ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/lovell/sharp"},(0,r.kt)("inlineCode",{parentName:"a"},"sharp"))," library is used."),(0,r.kt)("h2",{id:"prerequisites"},"Prerequisites"),(0,r.kt)("p",null,"First, you need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/module-progressive-web-app")," module:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx tramvai add @tramvai/module-progressive-web-app\n")),(0,r.kt)("p",null,"Then, connect ",(0,r.kt)("inlineCode",{parentName:"p"},"TramvaiPwaModule")," from this package to ",(0,r.kt)("inlineCode",{parentName:"p"},"createApp")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApp } from '@tramvai/core';\nimport { TramvaiPwaModule } from '@tramvai/module-progressive-web-app';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [TramvaiPwaModule],\n});\n")),(0,r.kt)("p",null,"At last, you need to create source Service Worker file, by default it should be named ",(0,r.kt)("inlineCode",{parentName:"p"},"src/sw.ts"),", and contain minimum boilerplate for better typings and workbox integration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/sw.ts"',title:'"src/sw.ts"'},'/// <reference lib="webworker" />\n\ndeclare const self: ServiceWorkerGlobalScope;\n\n// `self.__WB_MANIFEST` type is provided by `workbox-precaching` package, so `any` cast can we removed after this package import\nconst manifest = (self as any).__WB_MANIFEST;\n')),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"service-worker"},"Service Worker"),(0,r.kt)("p",null,"For SW generation, you need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.workbox.enabled")," option in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json")," configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "enabled": true\n      }\n    }\n  }\n}\n')),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("a",{parentName:"p",href:"/docs/references/cli/start#react-hot-refresh"},"Hot refresh")," is not working correctly with ",(0,r.kt)("inlineCode",{parentName:"p"},"InjectManifest")," plugin. If you want to devlop SW locally, better to disable hot refresh in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json"),":"),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "hotRefresh": {\n    "enabled": false\n  }\n}\n'))),(0,r.kt)("h4",{id:"registration-scope"},"Registration scope"),(0,r.kt)("p",null,"Default ",(0,r.kt)("a",{parentName:"p",href:"https://web.dev/learn/pwa/service-workers/#scope"},"Service Worker scope")," is ",(0,r.kt)("inlineCode",{parentName:"p"},"/"),". Registration scope can be changed by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.sw.scope")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "sw": {\n        "scope": "/myapp/"\n      },\n      "workbox": {\n        "enabled": true\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This parameter will be used for SW registration and injected in generated webmanifest file."),(0,r.kt)("h4",{id:"source-and-output-filenames"},"Source and output filenames"),(0,r.kt)("p",null,"By default, from ",(0,r.kt)("inlineCode",{parentName:"p"},"src/sw.ts")," file will be generated ",(0,r.kt)("inlineCode",{parentName:"p"},"${output.client}/sw.js"),". SW source and output filenames can be changed by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.sw.src")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.sw.dest")," options:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "sw": {\n        "src": "service-worker.ts",\n        "dest": "service-worker.js"\n      },\n      "workbox": {\n        "enabled": true\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"precaching"},"Precaching"),(0,r.kt)("p",null,"Simple way to precache all application assets is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"workbox-precaching")," package:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/sw.ts"',title:'"src/sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { precacheAndRoute } from 'workbox-precaching';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nprecacheAndRoute(self.__WB_MANIFEST);\n")),(0,r.kt)("p",null,"By default, ",(0,r.kt)("inlineCode",{parentName:"p"},"self.__WB_MANIFEST")," will contain all application processed assets - JS and CSS files, fonts, images."),(0,r.kt)("h4",{id:"control-precached-assets"},"Control precached assets"),(0,r.kt)("p",null,"For large applications, it is unnecessary to precache all assets."),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"exclude")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," options allow you to pass regexp for assets filtering, for example include only JS and CSS files or exclude all images:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "include": ["\\\\.js$", "\\\\.css$"],\n        // do not use include and exclude options together\n        "exclude": ["\\\\.{png|jpg|jpeg|svg|gif}$"]\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"Also you can specify JS and CSS chunks that should be included (",(0,r.kt)("inlineCode",{parentName:"p"},"chunks"),") or excluded (",(0,r.kt)("inlineCode",{parentName:"p"},"excludeChunks"),"):"),(0,r.kt)("admonition",{type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"Only JS and CSS assets will be included with ",(0,r.kt)("inlineCode",{parentName:"p"},"chunks")," option")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "chunks": ["react", "platform"],\n        // do not use chunks and excludeChunks options together\n        "excludeChunks": ["some-lazy-chunk"]\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"For custom assets, which is not included in build process, ",(0,r.kt)("inlineCode",{parentName:"p"},"additionalManifestEntries")," option is available:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "additionalManifestEntries": [\n          "static/offline.html",\n          // better way to pass object with file revision, it is important for cache invalidation\n          {\n            "url": "static/offline.html",\n            "revision": "1234567890"\n          }\n        ]\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"webmanifest-1"},"Webmanifest"),(0,r.kt)("p",null,"For webmanifest generation, you need to provide ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.webmanifest.enabled")," option in ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai.json")," configuration file:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "webmanifest": {\n        "enabled": true\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"output-filename"},"Output filename"),(0,r.kt)("p",null,"By default, will be generated ",(0,r.kt)("inlineCode",{parentName:"p"},"${output.client}/manifest.json")," file in development mode and ",(0,r.kt)("inlineCode",{parentName:"p"},"${output.client}/manifest.[hash].json")," for production. Filename can be changed by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.webmanifest.dest")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "webmanifest": {\n        "enabled": true,\n        "dest": "manifest.webmanifest"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"If ",(0,r.kt)("inlineCode",{parentName:"p"},"[hash]")," pattern will be used in filename, it will be replaced with manifest content hash, only for production build, it is useful for cache invalidation."),(0,r.kt)("h4",{id:"content"},"Content"),(0,r.kt)("p",null,"All another ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.webmanifest")," options will be passed directly to generated webmanifest. For example, from this configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "webmanifest": {\n        "enabled": true,\n        "name": "tincoin",\n        "start_url": "/",\n        "display": "standalone"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"This webmanifest will be created:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  // scope borrowed from `experiments.pwa.sw.scope`\n  "scope": "/",\n  "name": "tincoin",\n  "start_url": "/",\n  "display": "standalone"\n}\n')),(0,r.kt)("p",null,"Also, ",(0,r.kt)("inlineCode",{parentName:"p"},"theme_color")," property will be borrowed from ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.meta.themeColor"),", and ",(0,r.kt)("inlineCode",{parentName:"p"},"icons")," will be automatically generated from ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.icons")," configuration."),(0,r.kt)("h3",{id:"icons-1"},"Icons"),(0,r.kt)("p",null,"First, you need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"sharp")," library:"),(0,r.kt)(i.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,r.kt)(o.Z,{value:"npm",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npm install --save-dev sharp\n"))),(0,r.kt)(o.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add --dev sharp\n")))),(0,r.kt)("p",null,"Then, provide path to your source icon in ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.icons.src"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "icons": {\n        // relative to "root" directory\n        "src": "images/pwa-icon.png"\n      }\n    }\n  }\n}\n')),(0,r.kt)("p",null,"After application build, this set of icons will be generated and added to webmanifest:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'[\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/36x36.png",\n    "sizes": "36x36",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/48x48.png",\n    "sizes": "48x48",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/72x72.png",\n    "sizes": "72x72",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/96x96.png",\n    "sizes": "96x96",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/144x144.png",\n    "sizes": "144x144",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/192x192.png",\n    "sizes": "192x192",\n    "type": "image/png"\n  },\n  {\n    "src": "ASSETS_PREFIX/dist/client/pwa-icons/512x512.png",\n    "sizes": "512x512",\n    "type": "image/png"\n  }\n]\n')),(0,r.kt)("h4",{id:"sizes"},"Sizes"),(0,r.kt)("p",null,"Default set of icon sizes - ",(0,r.kt)("inlineCode",{parentName:"p"},"[36, 48, 72, 96, 144, 192, 512]"),"."),(0,r.kt)("p",null,"You can change it by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.icons.sizes")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "icons": {\n        "src": "images/pwa-icon.png",\n        "sizes": [512]\n      }\n    }\n  }\n}\n')),(0,r.kt)("h4",{id:"output-directory"},"Output directory"),(0,r.kt)("p",null,"Default output directory is ",(0,r.kt)("inlineCode",{parentName:"p"},"${output.client}/pwa-icons"),", it can be changed by providing ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.icons.dest")," option:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "icons": {\n        "src": "images/pwa-icon.png",\n        "dest": "icons"\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"meta-1"},"Meta"),(0,r.kt)("p",null,"Meta tags depends on ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.meta")," limited set of options, e.g.:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "meta": {\n        "themeColor": "#ffdd2d",\n        "viewport": "width=device-width, initial-scale=1"\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"pwa-recipes"},"PWA Recipes"),(0,r.kt)("p",null,"Special for ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," applications we have created a set of utility functions with popular PWA patterns, based on ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/modules/workbox-recipes/"},(0,r.kt)("inlineCode",{parentName:"a"},"workbox-recipes"))," library - ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/pwa-recipes"),"."),(0,r.kt)("h4",{id:"installation"},"Installation"),(0,r.kt)("p",null,"You need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/pwa-recipes")," and use recipes from it in your service worker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx tramvai add @tramvai/pwa-recipes\n")),(0,r.kt)("h4",{id:"cache-static-assets"},"Cache static assets"),(0,r.kt)("p",null,"Application may have a lot of static assets - JS and CSS files. Optimal solution for PWA is to cache this assets at runtime instead of precache all assets on application startup, and precache only critical assets."),(0,r.kt)("p",null,"Recipe ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheApplicationStaticAssets")," works like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cache all ",(0,r.kt)("inlineCode",{parentName:"li"},".js")," and ",(0,r.kt)("inlineCode",{parentName:"li"},".css")," files at runtime with passed ",(0,r.kt)("inlineCode",{parentName:"li"},"strategy")," option (default is ",(0,r.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#stale-while-revalidate"},"stale while revalidate")," strategy)"),(0,r.kt)("li",{parentName:"ul"},"limit cache size and ttl with ",(0,r.kt)("inlineCode",{parentName:"li"},"maxEntries")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"maxAgeSeconds")," options"),(0,r.kt)("li",{parentName:"ul"},"cache only ",(0,r.kt)("inlineCode",{parentName:"li"},"200")," or opaque responses"),(0,r.kt)("li",{parentName:"ul"},"allows to ",(0,r.kt)("strong",{parentName:"li"},"precache")," assets with ",(0,r.kt)("inlineCode",{parentName:"li"},"precacheManifest")," option (simple way to control this assets still ",(0,r.kt)("a",{parentName:"li",href:"#how-to-precache-webmanifest-and-critical-assets"},(0,r.kt)("inlineCode",{parentName:"a"},"pwa.workbox.include"))," parameter from ",(0,r.kt)("inlineCode",{parentName:"li"},"tramvai.json"),")")),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Prefer ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheApplicationStaticAssets")," method over the ",(0,r.kt)("inlineCode",{parentName:"p"},"precacheAndRoute")," from ",(0,r.kt)("inlineCode",{parentName:"p"},"workbox")," if you want cache all used assets")),(0,r.kt)("p",null,"Usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sw.ts"',title:'"sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { cacheApplicationStaticAssets } from '@tramvai/pwa-recipes';\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst precacheManifest = self.__WB_MANIFEST;\n\n// highlight-next-line\ncacheApplicationStaticAssets({ precacheManifest });\n")),(0,r.kt)("h4",{id:"cache-images"},"Cache images"),(0,r.kt)("p",null,"Recipe ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheApplicationImages")," works like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cache all ",(0,r.kt)("inlineCode",{parentName:"li"},".png, .jpg, .jpeg, .webp, .avif, .svg")," files runtime with passed ",(0,r.kt)("inlineCode",{parentName:"li"},"strategy")," option (default is ",(0,r.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#stale-while-revalidate"},"stale while revalidate")," strategy)"),(0,r.kt)("li",{parentName:"ul"},"limit cache size and ttl with ",(0,r.kt)("inlineCode",{parentName:"li"},"maxEntries")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"maxAgeSeconds")," options"),(0,r.kt)("li",{parentName:"ul"},"cache only ",(0,r.kt)("inlineCode",{parentName:"li"},"200")," or opaque responses"),(0,r.kt)("li",{parentName:"ul"},"allows to ",(0,r.kt)("strong",{parentName:"li"},"precache")," assets with ",(0,r.kt)("inlineCode",{parentName:"li"},"precacheManifest")," option (simple way to control this assets still ",(0,r.kt)("a",{parentName:"li",href:"#how-to-precache-webmanifest-and-critical-assets"},(0,r.kt)("inlineCode",{parentName:"a"},"pwa.workbox.include"))," parameter from ",(0,r.kt)("inlineCode",{parentName:"li"},"tramvai.json"),")")),(0,r.kt)("p",null,"Usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sw.ts"',title:'"sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { cacheApplicationImages } from '@tramvai/pwa-recipes';\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst precacheManifest = self.__WB_MANIFEST;\n\n// highlight-next-line\ncacheApplicationImages({ precacheManifest });\n")),(0,r.kt)("h4",{id:"cache-fonts"},"Cache fonts"),(0,r.kt)("p",null,"Recipe ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheApplicationFonts")," works like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cache all ",(0,r.kt)("inlineCode",{parentName:"li"},".woff, .woff2, .otf, .ttf")," files runtime with passed ",(0,r.kt)("inlineCode",{parentName:"li"},"strategy")," option (default is ",(0,r.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#stale-while-revalidate"},"stale while revalidate")," strategy)"),(0,r.kt)("li",{parentName:"ul"},"limit cache size and ttl with ",(0,r.kt)("inlineCode",{parentName:"li"},"maxEntries")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"maxAgeSeconds")," options"),(0,r.kt)("li",{parentName:"ul"},"cache only ",(0,r.kt)("inlineCode",{parentName:"li"},"200")," or opaque responses"),(0,r.kt)("li",{parentName:"ul"},"allows to ",(0,r.kt)("strong",{parentName:"li"},"precache")," assets with ",(0,r.kt)("inlineCode",{parentName:"li"},"precacheManifest")," option (simple way to control this assets still ",(0,r.kt)("a",{parentName:"li",href:"#how-to-precache-webmanifest-and-critical-assets"},(0,r.kt)("inlineCode",{parentName:"a"},"pwa.workbox.include"))," parameter from ",(0,r.kt)("inlineCode",{parentName:"li"},"tramvai.json"),")")),(0,r.kt)("p",null,"Usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sw.ts"',title:'"sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { cacheApplicationFonts } from '@tramvai/pwa-recipes';\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst precacheManifest = self.__WB_MANIFEST;\n\n// highlight-next-line\ncacheApplicationFonts({ precacheManifest });\n")),(0,r.kt)("h4",{id:"cache-pages"},"Cache pages"),(0,r.kt)("p",null,"Recipe ",(0,r.kt)("inlineCode",{parentName:"p"},"cacheApplicationPages")," works like this:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"cache all HTML pages in runtime, started with ",(0,r.kt)("inlineCode",{parentName:"li"},"pwa.sw.scope")," parameter from ",(0,r.kt)("inlineCode",{parentName:"li"},"tramvai.json"),", with passed ",(0,r.kt)("inlineCode",{parentName:"li"},"strategy")," option (default is ",(0,r.kt)("a",{parentName:"li",href:"https://developer.chrome.com/docs/workbox/modules/workbox-strategies/#network-first-network-falling-back-to-cache"},"network first")," strategy)"),(0,r.kt)("li",{parentName:"ul"},"with timeout for network request provided in ",(0,r.kt)("inlineCode",{parentName:"li"},"networkTimeoutSeconds")," option"),(0,r.kt)("li",{parentName:"ul"},"limit cache size and ttl with ",(0,r.kt)("inlineCode",{parentName:"li"},"maxEntries")," and ",(0,r.kt)("inlineCode",{parentName:"li"},"maxAgeSeconds")," options"),(0,r.kt)("li",{parentName:"ul"},"cache only ",(0,r.kt)("inlineCode",{parentName:"li"},"200")," or opaque responses"),(0,r.kt)("li",{parentName:"ul"},"allows to ",(0,r.kt)("strong",{parentName:"li"},"precache")," pages with ",(0,r.kt)("inlineCode",{parentName:"li"},"precacheManifest")," option (simple way to control this assets still ",(0,r.kt)("a",{parentName:"li",href:"#how-to-precache-webmanifest-and-critical-assets"},(0,r.kt)("inlineCode",{parentName:"a"},"pwa.workbox.include"))," parameter from ",(0,r.kt)("inlineCode",{parentName:"li"},"tramvai.json"),")")),(0,r.kt)("p",null,"Usage example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="sw.ts"',title:'"sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { cacheApplicationPages } from '@tramvai/pwa-recipes';\n\ndeclare const self: ServiceWorkerGlobalScope;\nconst precacheManifest = self.__WB_MANIFEST;\n\n// highlight-next-line\ncacheApplicationPages({ precacheManifest });\n")),(0,r.kt)("h2",{id:"how-to"},"How to"),(0,r.kt)("h3",{id:"how-to-use-custom-service-worker-or-webmanifest-file"},"How to use custom service worker or webmanifest file"),(0,r.kt)("p",null,"Sometimes you may want to register your own custom service worker or webmanifest. In this case you will need ",(0,r.kt)("inlineCode",{parentName:"p"},"TramvaiPwaLightModule"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApp } from '@tramvai/core';\nimport { TramvaiPwaLightModule } from '@tramvai/module-progressive-web-app';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [TramvaiPwaLightModule],\n  providers: [\n    provide({\n      provide: PWA_SW_URL_TOKEN,\n      useValue: '/sw.js',\n    }),\n    provide({\n      provide: PWA_MANIFEST_URL_TOKEN,\n      useValue: '/manifest.webmanifest',\n    }),\n  ],\n});\n")),(0,r.kt)("p",null,"For local development put your service worker to ",(0,r.kt)("inlineCode",{parentName:"p"},"/public")," folder or use ",(0,r.kt)("inlineCode",{parentName:"p"},"ServerModule")," to request proxying. Example:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createApp } from '@tramvai/core';\nimport { TramvaiPwaLightModule } from '@tramvai/module-progressive-web-app';\nimport { ServerModule } from '@tramvai/module-server';\n\ncreateApp({\n  name: 'tincoin',\n  modules: [TramvaiPwaLightModule, ServerModule],\n  providers: [\n    provide({\n      provide: PWA_SW_URL_TOKEN,\n      useValue: '/sw.js',\n    }),\n    ...(process.env.NODE_ENV === 'development'\n      ? [\n          provide({\n            provide: PROXY_CONFIG_TOKEN,\n            scope: Scope.SINGLETON,\n            useValue: {\n              context: ['/sw.js', '/manifest.webmanifest'],\n              target: 'https://cdn.example.com',\n            },\n          }),\n        ]\n      : []),\n  ],\n});\n")),(0,r.kt)("h3",{id:"how-to-send-messages-to-service-worker"},"How to send messages to Service Worker?"),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"workbox-window")," library provides ",(0,r.kt)("a",{parentName:"p",href:"https://developer.chrome.com/docs/workbox/modules/workbox-window/#window-to-service-worker-communication"},(0,r.kt)("inlineCode",{parentName:"a"},"messageSW"))," method as a wrapper around ",(0,r.kt)("inlineCode",{parentName:"p"},"postMessage")," API."),(0,r.kt)("p",null,"Workbox instance can be obtained from ",(0,r.kt)("inlineCode",{parentName:"p"},"PWA_WORKBOX_TOKEN"),", but use it with caution, because it will be available only in browser environment, and not all browsers support Service Workers."),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"workbox-window")," will register Service Worker at ",(0,r.kt)("inlineCode",{parentName:"p"},"commandLineListTokens.init")," stage, so you can use it only after this stage")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { provide, optional, commandLineListTokens } from '@tramvai/core';\n\n// import this provider only in browser environment\nconst provider = provide({\n  provide: commandLineListTokens.listen,\n  useFactory: ({ workbox }) => {\n    return async function sendMessageToSW() {\n      const wb = await workbox?.();\n\n      // wb can be `null` if Service Worker is not supported or registration failed\n      const swVersion = await wb?.messageSW({ type: 'GET_VERSION' });\n\n      console.log('Service Worker version:', swVersion);\n    };\n  },\n  deps: {\n    workbox: optional(PWA_WORKBOX_TOKEN),\n  },\n});\n")),(0,r.kt)("p",null,"And appropriate message handler in Service Worker:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="src/sw.ts"',title:'"src/sw.ts"'},"/// <reference lib=\"webworker\" />\n\nimport { precacheAndRoute } from 'workbox-precaching';\n\ndeclare const self: ServiceWorkerGlobalScope;\n\nconst SW_VERSION = '1.0.0';\n\nself.addEventListener('message', (event) => {\n  if (event.data.type === 'GET_VERSION') {\n    event.ports[0].postMessage(SW_VERSION);\n  }\n});\n\nprecacheAndRoute(self.__WB_MANIFEST);\n")),(0,r.kt)("h3",{id:"how-to-disable-service-worker-generation-in-development-mode"},"How to disable Service Worker generation in development mode?"),(0,r.kt)("p",null,"You may want to disable Service Worker in development mode most of time, except when you develop SW specific features. You can pass this object to ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.workbox.enabled")," option, and SW will be generated only for production build:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "enabled": {\n          "production": true,\n          "development": false\n        }\n      }\n    }\n  }\n}\n')),(0,r.kt)("h3",{id:"how-to-precache-webmanifest-and-critical-assets"},"How to precache webmanifest and critical assets?"),(0,r.kt)("p",null,"You can use ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.workbox.include")," option to precache webmanifest and critical assets. ",(0,r.kt)("inlineCode",{parentName:"p"},"experiments.pwa.workbox.chunks")," will always exclude webmanifest, so we need to use ",(0,r.kt)("inlineCode",{parentName:"p"},"include")," with some boilerplate regexp for assets hashes and without:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "experiments": {\n    "pwa": {\n      "workbox": {\n        "include": [\n          // react framework chunk\n          "react\\\\.([\\\\w\\\\d]+?\\\\.)?js$",\n          // tramvai framework chunk\n          "platform\\\\.([\\\\w\\\\d]+?\\\\.)?(js|css)$",\n          // workbox-window chunk\n          "tramvai-workbox-window\\\\.([\\\\w\\\\d]+?\\\\.)?chunk.js$",\n          // webmanifest\n          "manifest\\\\.([\\\\w\\\\d]+?\\\\.)?webmanifest$"\n        ]\n      }\n    }\n  }\n}\n')))}d.isMDXComponent=!0}}]);