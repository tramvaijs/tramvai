"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[5517],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var p=a.createContext({}),d=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},c=function(e){var t=d(e.components);return a.createElement(p.Provider,{value:t},e.children)},s={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,p=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=d(n),m=r,f=u["".concat(p,".").concat(m)]||u[m]||s[m]||o;return n?a.createElement(f,i(i({ref:t},c),{},{components:n})):a.createElement(f,i({ref:t},c))}));function m(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:r,i[1]=l;for(var d=2;d<o;d++)i[d]=n[d];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},6446:function(e,t,n){n.r(t),n.d(t,{assets:function(){return p},contentTitle:function(){return i},default:function(){return s},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return d}});var a=n(7462),r=(n(7294),n(3905));const o={id:"data-fetching",title:"Data Fetching"},i=void 0,l={unversionedId:"features/child-app/data-fetching",id:"features/child-app/data-fetching",title:"Data Fetching",description:"Explanation",source:"@site/tmp-docs/03-features/015-child-app/07-data-fetching.md",sourceDirName:"03-features/015-child-app",slug:"/features/child-app/data-fetching",permalink:"/docs/features/child-app/data-fetching",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/03-features/015-child-app/07-data-fetching.md",tags:[],version:"current",sidebarPosition:7,frontMatter:{id:"data-fetching",title:"Data Fetching"},sidebar:"sidebar",previous:{title:"Lifecycle",permalink:"/docs/features/child-app/lifecycle"},next:{title:"Working with Url",permalink:"/docs/features/child-app/routing"}},p={},d=[{value:"Explanation",id:"explanation",level:2},{value:"HTTP Client",id:"http-client",level:3},{value:"Actions",id:"actions",level:3},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Make HTTP request",id:"make-http-request",level:3}],c={toc:d};function s(e){let{components:t,...n}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"Standard way to fetch data in Child App is to use ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/data-fetching/http-client"},"HTTP Clients")," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/data-fetching/action"},"Actions")," with ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/state-management"},"Stores"),"."),(0,r.kt)("h3",{id:"http-client"},"HTTP Client"),(0,r.kt)("p",null,"You have a two main options to use ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," HTTP clients:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Get already created clients from Root App"),(0,r.kt)("li",{parentName:"ul"},"Create your own HTTP client in Child App")),(0,r.kt)("p",null,"We recommend to use first approach with already created clients from Root App, because it opens a lot of optimizations:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Child App bundle is smaller because doesn't contain HTTP client code"),(0,r.kt)("li",{parentName:"ul"},"Cache for same requests will be shared between all Child Apps"),(0,r.kt)("li",{parentName:"ul"},"The same Child App requests will be deduplicated")),(0,r.kt)("p",null,(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_CLIENT")," and all your custom HTTP clients will be available in Child App DI automatically, and you need only to use appropriate tokens to get it."),(0,r.kt)("admonition",{type:"info"},(0,r.kt)("p",{parentName:"admonition"},(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/module-http-client")," need to be connected in Root App, if we want to use ",(0,r.kt)("inlineCode",{parentName:"p"},"HTTP_CLIENT")," token in Child App")),(0,r.kt)("h3",{id:"actions"},"Actions"),(0,r.kt)("p",null,(0,r.kt)("a",{parentName:"p",href:"/docs/features/data-fetching/action"},"Actions")," is the standard way to perform any side-effects in the Child App, and works exactly the same as in Root App."),(0,r.kt)("p",null,"All declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"createChildApp")," actions will be executed in parallel on the different stages of ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/lifecycle"},"Child App lifecycle"),"."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("h3",{id:"installation"},"Installation"),(0,r.kt)("p",null,"First, you need to install ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/module-common")," module and ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/tokens-http-client")," in your Child App:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-bash"},"npx tramvai add @tramvai/module-common\nnpx tramvai add @tramvai/tokens-http-client\n")),(0,r.kt)("p",null,"Then, connect ",(0,r.kt)("inlineCode",{parentName:"p"},"CommonChildAppModule")," from this module in your ",(0,r.kt)("inlineCode",{parentName:"p"},"createChildApp")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createChildApp } from '@tramvai/child-app-core';\nimport { CommonChildAppModule } from '@tramvai/module-common';\nimport { RootCmp } from './components/root';\n\n// eslint-disable-next-line import/no-default-export\nexport default createChildApp({\n  name: 'fancy-child',\n  render: RootCmp,\n  modules: [CommonChildAppModule],\n  providers: [],\n});\n")),(0,r.kt)("h3",{id:"make-http-request"},"Make HTTP request"),(0,r.kt)("admonition",{type:"tip"},(0,r.kt)("p",{parentName:"admonition"},"Perfect alternative to Action and State combination is awesome ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/react-query"},"React Query")," library")),(0,r.kt)("p",null,"\u231b At first, we need to create a new ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/state-management"},"Store")," for request data and execution state, for example with ",(0,r.kt)("inlineCode",{parentName:"p"},"data"),", ",(0,r.kt)("inlineCode",{parentName:"p"},"error")," and ",(0,r.kt)("inlineCode",{parentName:"p"},"loading")," states:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createReducer, createEvent } from '@tramvai/state';\n\nexport const dataRequested = createEvent('requested');\nexport const dataLoaded = createEvent<Data>('loaded');\nexport const dataFailed = createEvent<Error>('failed');\n\ntype State = {\n  data: Data | null;\n  error: Error | null;\n  loading: boolean;\n};\n\nconst initialState: State = { data: null, error: null, loading: false };\n\nexport const SomeDataStore = createReducer('some-data', initialState)\n  .on(dataRequested, (state) => ({ data: null, error: null, loading: true }))\n  .on(dataLoaded, (state, data) => ({ data, error: null, loading: false }))\n  .on(dataFailed, (state, error) => ({ data: null, error, loading: false }));\n")),(0,r.kt)("p",null,"\u231b Then, we need to create a new Action with HTTP call, and save all information to our new store:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { declareAction } from '@tramvai/core';\nimport { HTTP_CLIENT } from '@tramvai/tokens-http-client';\nimport { dataRequested, dataLoaded, dataFailed } from '../stores/some-data';\n\nexport const fetchSomeDataAction = declareAction({\n  name: 'fetch-some-data',\n  async fn() {\n    this.dispatch(dataRequested());\n\n    try {\n      const { payload } = this.deps.httpClient.get<Data>('https://api.get/some-data/');\n\n      this.dispatch(dataLoaded(payload));\n    } catch (error) {\n      this.dispatch(dataFailed(error));\n    }\n  },\n  deps: {\n    // this dependency will be resolved from Root App\n    httpClient: HTTP_CLIENT,\n  },\n});\n")),(0,r.kt)("p",null,"\u231b Then, action need to be declared in ",(0,r.kt)("inlineCode",{parentName:"p"},"createChildApp")," function:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"import { createChildApp } from '@tramvai/child-app-core';\nimport { CommonChildAppModule } from '@tramvai/module-common';\nimport { RootCmp } from './components/root';\n  // highlight-next-line\nimport { fetchSomeDataAction } from './actions/some-data';\n\n// eslint-disable-next-line import/no-default-export\nexport default createChildApp({\n  name: 'fancy-child',\n  render: RootCmp,\n  modules: [CommonChildAppModule],\n  providers: [],\n  // highlight-next-line\n  actions: [fetchSomeDataAction],\n});\n")),(0,r.kt)("p",null,"\u231b At last, we can subscribe to this data in our ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/ui-component"},"UI component"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/root.tsx"',title:'"components/root.tsx"'},"import { useStore } from '@tramvai/state';\nimport { SomeDataStore } from '../stores/some-data';\n\nexport const RootCmp = () => {\n  const { data, error, loading } = useStore(SomeDataStore);\n\n  if (loading) {\n    return <div>Loading...</div>;\n  }\n  if (error) {\n    return <div>Error: {error.message}</div>;\n  }\n  return <div>Result: {data}</div>;\n};\n")),(0,r.kt)("p",null,"This action will be executed before Root App will be render our Child App. If Child App will be ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/connect#preloading"},"preloaded"),", in success case, this action will be executed on the server side, and user never see loading state in the browser."))}s.isMDXComponent=!0}}]);