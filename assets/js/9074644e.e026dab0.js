"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[7339],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>d});var a=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function p(e,t){if(null==e)return{};var n,a,o=function(e,t){if(null==e)return{};var n,a,o={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=a.createContext({}),s=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=s(e.components);return a.createElement(l.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},m=a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,r=e.originalType,l=e.parentName,u=p(e,["components","mdxType","originalType","parentName"]),m=s(n),d=o,g=m["".concat(l,".").concat(d)]||m[d]||c[d]||r;return n?a.createElement(g,i(i({ref:t},u),{},{components:n})):a.createElement(g,i({ref:t},u))}));function d(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var r=n.length,i=new Array(r);i[0]=m;var p={};for(var l in t)hasOwnProperty.call(t,l)&&(p[l]=t[l]);p.originalType=e,p.mdxType="string"==typeof e?e:o,i[1]=p;for(var s=2;s<r;s++)i[s]=n[s];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}m.displayName="MDXCreateElement"},9282:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>c,frontMatter:()=>r,metadata:()=>p,toc:()=>s});var a=n(7462),o=(n(7294),n(3905));const r={id:"routing",title:"Working with Url"},i=void 0,p={unversionedId:"features/child-app/routing",id:"features/child-app/routing",title:"Working with Url",description:"Explanation",source:"@site/tmp-docs/03-features/016-child-app/08-routing.md",sourceDirName:"03-features/016-child-app",slug:"/features/child-app/routing",permalink:"/docs/features/child-app/routing",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/03-features/016-child-app/08-routing.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"routing",title:"Working with Url"},sidebar:"sidebar",previous:{title:"Data Fetching",permalink:"/docs/features/child-app/data-fetching"},next:{title:"Dependency Injection",permalink:"/docs/features/child-app/di"}},l={},s=[{value:"Explanation",id:"explanation",level:2},{value:"Usage",id:"usage",level:2},{value:"Installation",id:"installation",level:3},{value:"Make navigations",id:"make-navigations",level:3},{value:"Update current route",id:"update-current-route",level:3},{value:"Subscribe to route changes",id:"subscribe-to-route-changes",level:3},{value:"Multi-page Child Apps",id:"multi-page-child-apps",level:3},{value:"Application",id:"application",level:4},{value:"Child App",id:"child-app",level:4}],u={toc:s};function c({components:e,...t}){return(0,o.kt)("wrapper",(0,a.Z)({},u,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("p",null,"Routing is configured and controlled by the Root App, Child App has a limited set of capabilities to work with ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," router."),(0,o.kt)("p",null,"Child App has access to ",(0,o.kt)("inlineCode",{parentName:"p"},"tramvai")," router through DI and can make navigations or subscribe to route changes in React components, but it can't add additional routes in the application."),(0,o.kt)("h2",{id:"usage"},"Usage"),(0,o.kt)("h3",{id:"installation"},"Installation"),(0,o.kt)("p",null,"First, you need to install ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/module-router")," module and ",(0,o.kt)("inlineCode",{parentName:"p"},"@tramvai/tokens-router")," in your Child App:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npx tramvai add @tramvai/module-router\nnpx tramvai add @tramvai/tokens-router\n")),(0,o.kt)("p",null,"Then, connect ",(0,o.kt)("inlineCode",{parentName:"p"},"RouterChildAppModule")," from this module in your ",(0,o.kt)("inlineCode",{parentName:"p"},"createChildApp")," function:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { createChildApp } from '@tramvai/child-app-core';\nimport { RouterChildAppModule } from '@tramvai/module-router';\nimport { RootCmp } from './components/root';\n\n// eslint-disable-next-line import/no-default-export\nexport default createChildApp({\n  name: 'fancy-child',\n  render: RootCmp,\n  modules: [RouterChildAppModule],\n  providers: [],\n});\n")),(0,o.kt)("h3",{id:"make-navigations"},"Make navigations"),(0,o.kt)("p",null,"Simplest way to make navigations in Child App is to use ",(0,o.kt)("a",{parentName:"p",href:"/docs/features/routing/links-and-navigation#link-component"},(0,o.kt)("inlineCode",{parentName:"a"},"<Link />")," component"),"."),(0,o.kt)("p",null,"Another way is to use ",(0,o.kt)("a",{parentName:"p",href:"/docs/features/routing/links-and-navigation#pageservice-service"},"PAGE_SERVICE_TOKEN")," token from Root App, for example you can use it in React components directly with ",(0,o.kt)("inlineCode",{parentName:"p"},"useDi"),", let's make navigation to ",(0,o.kt)("inlineCode",{parentName:"p"},"/another-page/"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/root.tsx"',title:'"components/root.tsx"'},"import { useDi } from '@tramvai/react';\nimport { PAGE_SERVICE_TOKEN } from '@tramvai/tokens-router';\n\nexport const RootCmp = () => {\n  const pageService = useDi(PAGE_SERVICE_TOKEN);\n  const navigate = () => pageService.navigate('/another-page/');\n\n  return <button onClick={navigate}>Navigate to /another-page/</button>;\n};\n")),(0,o.kt)("h3",{id:"update-current-route"},"Update current route"),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"PAGE_SERVICE_TOKEN")," is also used to update current route without navigation. We already use it directly in React component, let's try Actions now, for example we will add a ",(0,o.kt)("inlineCode",{parentName:"p"},"myOwnQuery")," query parameter:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/root.tsx"',title:'"components/root.tsx"'},"import { declareAction } from '@tramvai/core';\nimport { useActions } from '@tramvai/state';\nimport { PAGE_SERVICE_TOKEN } from '@tramvai/tokens-router';\n\nconst updateQueryAction = declareAction({\n  name: 'update-query',\n  async fn(value: string) {\n    // highlight-next-line\n    return this.deps.pageService.updateCurrentRoute({ query: { myOwnQuery: value } });\n  },\n  deps: {\n    pageService: PAGE_SERVICE_TOKEN,\n  },\n});\n\nexport const RootCmp = () => {\n  // highlight-next-line\n  const updateQuery = useActions(updateQueryAction);\n  const handleUpdate = () => updateQuery('some value');\n\n  return (\n    <>\n      <button onClick={handleUpdate}>add myOwnQuery query parameter</button>\n    </>\n  );\n};\n")),(0,o.kt)("h3",{id:"subscribe-to-route-changes"},"Subscribe to route changes"),(0,o.kt)("p",null,(0,o.kt)("a",{parentName:"p",href:"/docs/features/routing/working-with-url"},(0,o.kt)("inlineCode",{parentName:"a"},"useRoute")," and ",(0,o.kt)("inlineCode",{parentName:"a"},"useUrl")," hooks")," is available to use in Child App for subscriptions to route changes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="components/root.tsx"',title:'"components/root.tsx"'},"import { useRoute } from '@tramvai/module-router';\n\nexport const RootCmp = () => {\n  const route = useRoute();\n\n  return <div>Route path: {route.actualPath}</div>;\n};\n")),(0,o.kt)("h3",{id:"multi-page-child-apps"},"Multi-page Child Apps"),(0,o.kt)("admonition",{type:"warning"},(0,o.kt)("p",{parentName:"admonition"},"Experimental and unstable, public API can be changed in the future."),(0,o.kt)("p",{parentName:"admonition"},(0,o.kt)("a",{parentName:"p",href:"/docs/features/pages#file-system-routing"},"File-System Routing")," is not supported yet.")),(0,o.kt)("p",null,"For a complex features, you may want to have one Child App, which can be rendered in multiple pages."),(0,o.kt)("p",null,"Child Apps support pages with a limited set of features:"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"/docs/references/tramvai/react"},(0,o.kt)("inlineCode",{parentName:"a"},"lazy")," component from ",(0,o.kt)("inlineCode",{parentName:"a"},"@tramvai/react"))),(0,o.kt)("li",{parentName:"ul"},"Unique list of actions for every page"),(0,o.kt)("li",{parentName:"ul"},"Code-splitting by ",(0,o.kt)("a",{parentName:"li",href:"https://web.dev/granular-chunking-nextjs/"},"granular")," strategy"),(0,o.kt)("li",{parentName:"ul"},"Preloading for pages for specific routes")),(0,o.kt)("p",null,"Application routing still declared and configured in Root Application."),(0,o.kt)("h4",{id:"application"},"Application"),(0,o.kt)("p",null,"\u231b At first, you need to declare routes in Root App with ",(0,o.kt)("inlineCode",{parentName:"p"},"unstable_childAppPageComponent")," property, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"const routes = [\n  {\n    name: 'lazy-foo',\n    path: '/lazy/foo',\n    config: {\n      pageComponent: '@/pages/LazyPage',\n      unstable_childAppPageComponent: 'FooCmp',\n    },\n  },\n  {\n    name: 'lazy-bar',\n    path: '/lazy/bar',\n    config: {\n      pageComponent: '@/pages/LazyPage',\n      unstable_childAppPageComponent: 'BarCmp',\n    },\n  },\n];\n")),(0,o.kt)("p",null,"\u231b The same Child App will be used in a page component on both routes:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="app/src/pages/LazyPage.tsx"',title:'"app/src/pages/LazyPage.tsx"'},"import type { PageComponent } from '@tramvai/react';\nimport { ChildApp } from '@tramvai/module-child-app';\n\nexport const LazyPage: PageComponent = () => {\n  return (\n    <>\n      <ChildApp name=\"lazy\" />\n    </>\n  );\n};\n\nLazyPage.childApps = [{ name: 'lazy' }];\n\nexport default LazyPage;\n")),(0,o.kt)("h4",{id:"child-app"},"Child App"),(0,o.kt)("p",null,"\u231b In Child App UI component you need to use ",(0,o.kt)("inlineCode",{parentName:"p"},"children")," property, where current page component will be passed:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="child-app/src/components/root.tsx"',title:'"child-app/src/components/root.tsx"'},"import type { PropsWithChildren } from 'react';\n\nexport const RootCmp = ({ children }: PropsWithChildren<{}>) => {\n  return (\n    <>\n      <h1>Lazy Child App</h1>\n\n      {children}\n    </>\n  );\n};\n")),(0,o.kt)("p",null,"\u231b Also you need to create all required page components, e.g.:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="child-app/src/components/foo.tsx"',title:'"child-app/src/components/foo.tsx"'},"import { declareAction } from '@tramvai/core';\n\nconst fooPageAction = declareAction({\n  name: 'foo-page-action',\n  async fn() {\n    // do something\n  },\n});\n\nexport const FooCmp = () => {\n  return (\n    <>\n      <h2>Foo Page</h2>\n    </>\n  );\n};\n\nFooCmp.actions = [fooPageAction];\n\nexport default FooCmp;\n")),(0,o.kt)("p",null,"\u231b Then, you need to register all components in Child App through ",(0,o.kt)("inlineCode",{parentName:"p"},"CHILD_APP_PAGE_COMPONENTS_TOKEN"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="child-app/src/index.ts"',title:'"child-app/src/index.ts"'},"import { provide } from '@tramvai/core';\nimport { createChildApp } from '@tramvai/child-app-core';\nimport { CommonChildAppModule } from '@tramvai/module-common';\nimport { CHILD_APP_PAGE_COMPONENTS_TOKEN } from '@tramvai/tokens-child-app';\nimport { lazy } from '@tramvai/react';\nimport { RouterChildAppModule } from '@tramvai/module-router';\nimport { RootCmp } from './components/root';\n\n// declare lazy components for code-splitting\nconst FooCmp = lazy(() => import('./components/foo'));\nconst BarCmp = lazy(() => import('./components/bar'));\n\nexport default createChildApp({\n  name: 'lazy',\n  render: RootCmp,\n  // provide required modules\n  modules: [CommonChildAppModule, RouterChildAppModule],\n  providers: [\n    provide({\n      provide: CHILD_APP_PAGE_COMPONENTS_TOKEN,\n      // the same keys as in App routes list in `unstable_childAppPageComponent` properties\n      useValue: {\n        FooCmp,\n        BarCmp,\n      },\n    }),\n  ],\n});\n")),(0,o.kt)("p",null,"Thats all! In ",(0,o.kt)("inlineCode",{parentName:"p"},"/lazy/foo")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"/lazy/bar")," route you will see ",(0,o.kt)("inlineCode",{parentName:"p"},"FooCmp")," or ",(0,o.kt)("inlineCode",{parentName:"p"},"BarCmp")," component respectively, and only specific actions will be executed."))}c.isMDXComponent=!0}}]);