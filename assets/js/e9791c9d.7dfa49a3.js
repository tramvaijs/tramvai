"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[7498],{3905:(e,t,l)=>{l.d(t,{Zo:()=>d,kt:()=>u});var n=l(7294);function i(e,t,l){return t in e?Object.defineProperty(e,t,{value:l,enumerable:!0,configurable:!0,writable:!0}):e[t]=l,e}function o(e,t){var l=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),l.push.apply(l,n)}return l}function r(e){for(var t=1;t<arguments.length;t++){var l=null!=arguments[t]?arguments[t]:{};t%2?o(Object(l),!0).forEach((function(t){i(e,t,l[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(l)):o(Object(l)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(l,t))}))}return e}function a(e,t){if(null==e)return{};var l,n,i=function(e,t){if(null==e)return{};var l,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||(i[l]=e[l]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)l=o[n],t.indexOf(l)>=0||Object.prototype.propertyIsEnumerable.call(e,l)&&(i[l]=e[l])}return i}var s=n.createContext({}),p=function(e){var t=n.useContext(s),l=t;return e&&(l="function"==typeof e?e(t):r(r({},t),e)),l},d=function(e){var t=p(e.components);return n.createElement(s.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},f=n.forwardRef((function(e,t){var l=e.components,i=e.mdxType,o=e.originalType,s=e.parentName,d=a(e,["components","mdxType","originalType","parentName"]),f=p(l),u=i,m=f["".concat(s,".").concat(u)]||f[u]||c[u]||o;return l?n.createElement(m,r(r({ref:t},d),{},{components:l})):n.createElement(m,r({ref:t},d))}));function u(e,t){var l=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=l.length,r=new Array(o);r[0]=f;var a={};for(var s in t)hasOwnProperty.call(t,s)&&(a[s]=t[s]);a.originalType=e,a.mdxType="string"==typeof e?e:i,r[1]=a;for(var p=2;p<o;p++)r[p]=l[p];return n.createElement.apply(null,r)}return n.createElement.apply(null,l)}f.displayName="MDXCreateElement"},2277:(e,t,l)=>{l.r(t),l.d(t,{assets:()=>s,contentTitle:()=>r,default:()=>c,frontMatter:()=>o,metadata:()=>a,toc:()=>p});var n=l(7462),i=(l(7294),l(3905));const o={id:"polyfills",title:"Polyfills Integration"},r=void 0,a={unversionedId:"features/polyfills",id:"features/polyfills",title:"Polyfills Integration",description:"Tramvai has polyfills integration:",source:"@site/tmp-docs/03-features/018-polyfills.md",sourceDirName:"03-features",slug:"/features/polyfills",permalink:"/docs/features/polyfills",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/03-features/018-polyfills.md",tags:[],version:"current",sidebarPosition:18,frontMatter:{id:"polyfills",title:"Polyfills Integration"},sidebar:"sidebar",previous:{title:"PWA (Progressive Web App)",permalink:"/docs/features/pwa"},next:{title:"Integrity",permalink:"/docs/features/build/integrity"}},s={},p=[{value:"Setup",id:"setup",level:2},{value:"Create a file polyfill.ts",id:"create-a-file-polyfillts",level:3},{value:"Set up @tramvai/cli",id:"set-up-tramvaicli",level:3},{value:"How polyfills loading works",id:"how-polyfills-loading-works",level:2},{value:"Notes about polyfill condition generation",id:"notes-about-polyfill-condition-generation",level:2},{value:"How to check polyfill conditions, features, and browser versions",id:"how-to-check-polyfill-conditions-features-and-browser-versions",level:3},{value:"Extending the polyfill condition loading check",id:"extending-the-polyfill-condition-loading-check",level:2},{value:"Why is it necessary?",id:"why-is-it-necessary",level:3},{value:"Important tips",id:"important-tips",level:3},{value:"Extending the check",id:"extending-the-check",level:3},{value:"Extending the list of polyfills",id:"extending-the-list-of-polyfills",level:2},{value:"Modern polyfills",id:"modern-polyfills",level:2},{value:"Web polyfills",id:"web-polyfills",level:3}],d={toc:p};function c({components:e,...t}){return(0,i.kt)("wrapper",(0,n.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Tramvai has polyfills integration:"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"there is a separate library ",(0,i.kt)("inlineCode",{parentName:"li"},"@tinkoff/pack-polyfills")," that contains all the necessary polyfills"),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@tramvai/cli")," builds polyfills in a separate file."),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("inlineCode",{parentName:"li"},"@tramvai/module-render")," contains code that only loads polyfills where they are needed.")),(0,i.kt)("h2",{id:"setup"},"Setup"),(0,i.kt)("h3",{id:"create-a-file-polyfillts"},"Create a file polyfill.ts"),(0,i.kt)("p",null,"You need to create a file ",(0,i.kt)("inlineCode",{parentName:"p"},"polyfill.ts")," inside your project, for example, ",(0,i.kt)("inlineCode",{parentName:"p"},"src/polyfill.ts"),", and connect the polyfills inside:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import '@tinkoff/pack-polyfills';\n")),(0,i.kt)("p",null,"It is recommended to connect polyfills as a flat list for more precise control."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import 'core-js/modules/es.array.at';\nimport 'core-js/modules/es.array.concat';\nimport 'core-js/modules/es.array.copy-within';\nimport 'core-js/modules/es.array.fill';\nimport 'core-js/modules/es.array.filter';\nimport 'core-js/modules/es.array.find-index';\nimport 'core-js/modules/es.array.find';\nimport 'core-js/modules/es.array.flat-map';\nimport 'core-js/modules/es.array.flat';\nimport 'core-js/modules/es.array.from';\n// ...\n")),(0,i.kt)("h3",{id:"set-up-tramvaicli"},"Set up @tramvai/cli"),(0,i.kt)("p",null,"After that, we need to tell ",(0,i.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," that our project has polyfills. To do this, add the line ",(0,i.kt)("inlineCode",{parentName:"p"},'"polyfill": "src/polyfill.ts"')," in ",(0,i.kt)("inlineCode",{parentName:"p"},"projects[APP_ID].polyfill")," inside ",(0,i.kt)("inlineCode",{parentName:"p"},"tramvai.json"),". Example:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "projects": {\n    "pfphome": {\n      "name": "pfphome",\n      "root": "src",\n      "type": "application",\n      "polyfill": "src/polyfill.ts"\n    }\n  }\n}\n')),(0,i.kt)("h2",{id:"how-polyfills-loading-works"},"How polyfills loading works"),(0,i.kt)("p",null,"On the ",(0,i.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," side, we have configured the build to generate polyfills as a separate file, so they don't mix with the main code. With every build, there will be a file containing polyfills."),(0,i.kt)("p",null,(0,i.kt)("a",{parentName:"p",href:"/docs/references/modules/render"},"module-render")," checks for polyfills in the build. If they are found, it embeds inline code for each client to check feature availability in the browser. If the browser does not support a feature, it is considered legacy, and polyfills are loaded. The polyfill necessity check is generated automatically based on the provided polyfills list."),(0,i.kt)("h2",{id:"notes-about-polyfill-condition-generation"},"Notes about polyfill condition generation"),(0,i.kt)("p",null,"To generate the polyfill loading condition, we use the list of imported polyfills from the ",(0,i.kt)("inlineCode",{parentName:"p"},"polyfill.ts")," entrypoint. A Webpack plugin analyzes all imported ",(0,i.kt)("inlineCode",{parentName:"p"},"core-js")," modules and constructs an object containing language features that appeared last in browsers:"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "chrome": {\n    "spec": "es.object.has-own",\n    "version": "93"\n  },\n  "chrome-android": {\n    "spec": "es.object.has-own",\n    "version": "93"\n  },\n  "edge": {\n    "spec": "es.object.has-own",\n    "version": "93"\n  },\n  "firefox": {\n    "spec": "es.array.includes",\n    "version": "102"\n  },\n  "ios": {\n    "spec": "es.array.at",\n    "version": "15.4"\n  },\n  "opera": {\n    "spec": "es.object.has-own",\n    "version": "79"\n  },\n  "opera_mobile": {\n    "spec": "es.object.has-own",\n    "version": "66"\n  },\n  "safari": {\n    "spec": "es.array.at",\n    "version": "15.4"\n  },\n  "samsung": {\n    "spec": "es.object.has-own",\n    "version": "17.0"\n  }\n}\n')),(0,i.kt)("p",null,"As a result, we get the following check:"),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"!(Object.hasOwn) || !('at' in window.Array.prototype)")),(0,i.kt)("p",null,"This check is executed in the browser, and if it evaluates to true, polyfills will be loaded. There is no need to check for all polyfills inside the entrypoint \u2014 if ",(0,i.kt)("inlineCode",{parentName:"p"},"Object.hasOwn")," is available, it guarantees the presence of all earlier features."),(0,i.kt)("p",null,"Using this mechanism, polyfills are delivered only to a small percentage of users with outdated browsers (Chrome <= 93). However, caution is required to avoid breaking compatibility or unnecessarily increasing the browser version threshold for polyfill loading."),(0,i.kt)("p",null,(0,i.kt)("inlineCode",{parentName:"p"},"@tinkoff/pack-polyfills")," package under the hood connects a flat list of polyfills, from which part of polyfills that included by default in ",(0,i.kt)("inlineCode",{parentName:"p"},"preset-env")," have been removed. These remaining methods are not yet widely used and significantly raise the baseline for polyfill inclusion. You can find the full list of missing polyfills in ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/tramvaijs/tramvai/blob/main/examples/polyfills/src/modern.polyfill.ts"},"test"),". You can manually add these polyfills to your project (it is recommended to include them in the modern entrypoint)."),(0,i.kt)("h3",{id:"how-to-check-polyfill-conditions-features-and-browser-versions"},"How to check polyfill conditions, features, and browser versions"),(0,i.kt)("p",null,"You can find this information in the ",(0,i.kt)("inlineCode",{parentName:"p"},"stats.json")," file in the final build."),(0,i.kt)("h2",{id:"extending-the-polyfill-condition-loading-check"},"Extending the polyfill condition loading check"),(0,i.kt)("h3",{id:"why-is-it-necessary"},"Why is it necessary?"),(0,i.kt)("p",null,"Automatic generation of the check condition applies only to ",(0,i.kt)("inlineCode",{parentName:"p"},"core-js")," polyfills. If you want to add a third-party polyfill that is not part of ",(0,i.kt)("inlineCode",{parentName:"p"},"core-js"),", you need to manually add a condition (e.g., ",(0,i.kt)("inlineCode",{parentName:"p"},"IntersectionObserver"),")."),(0,i.kt)("h3",{id:"important-tips"},"Important tips"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},"Replace ",(0,i.kt)("inlineCode",{parentName:"li"},"POLYFILL_CONDITION")," with your additional check."),(0,i.kt)("li",{parentName:"ul"},"Your custom check should return ",(0,i.kt)("inlineCode",{parentName:"li"},"true")," if the browser does not support the feature.")),(0,i.kt)("h3",{id:"extending-the-check"},"Extending the check"),(0,i.kt)("p",null,"To achieve this, set the provider ",(0,i.kt)("inlineCode",{parentName:"p"},"POLYFILL_CONDITION"),", which is imported from ",(0,i.kt)("inlineCode",{parentName:"p"},"@tramvai/module-render")," and pass a new condition."),(0,i.kt)("p",null,"Example: Suppose we want to check for the presence of ",(0,i.kt)("inlineCode",{parentName:"p"},"window.ResizeObserver"),". The resulting expression should return ",(0,i.kt)("inlineCode",{parentName:"p"},"true")," if the browser does not support the feature."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts"},"import { POLYFILL_CONDITION } from '@tramvai/module-render';\nimport { provide } from '@tramvai/core';\n\nconst provider = provide({\n  provide: POLYFILL_CONDITION,\n  useValue: `!('ResizeObserver' in window)`,\n});\n")),(0,i.kt)("h2",{id:"extending-the-list-of-polyfills"},"Extending the list of polyfills"),(0,i.kt)("p",null,"To add a new polyfill, import it from ",(0,i.kt)("inlineCode",{parentName:"p"},"core-js/modules"),". The polyfill condition generation will account for this addition."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="polyfill.ts"',title:'"polyfill.ts"'},"import '@tinkoff/pack-polyfills';\n\n// Chrome 97+\nimport 'core-js/modules/es.array.find-last';\n")),(0,i.kt)("h2",{id:"modern-polyfills"},"Modern polyfills"),(0,i.kt)("p",null,"Apart from polyfills in ",(0,i.kt)("inlineCode",{parentName:"p"},"polyfill.ts"),", there is an option to connect polyfills via the ",(0,i.kt)("inlineCode",{parentName:"p"},"modern polyfill")," entrypoint. It works the same way, and to enable it, add ",(0,i.kt)("inlineCode",{parentName:"p"},"modernPolyfill")," with the file path in ",(0,i.kt)("inlineCode",{parentName:"p"},"tramvai.json"),". By default, it is ",(0,i.kt)("inlineCode",{parentName:"p"},"src/modern.polyfill.ts"),"."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "projects": {\n    "pfphome": {\n      "name": "pfphome",\n      "root": "src",\n      "type": "application",\n      "modernPolyfill": "src/modern.polyfill.ts"\n    }\n  }\n}\n')),(0,i.kt)("p",null,"Unlike the standard ",(0,i.kt)("inlineCode",{parentName:"p"},"polyfill")," entry point, ",(0,i.kt)("inlineCode",{parentName:"p"},"modernPolyfill")," is always loaded without conditions. This mechanism allows new language features to be used without increasing the polyfill condition version threshold."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modern.polyfill.ts"',title:'"modern.polyfill.ts"'},"// Chrome 128+\nimport 'core-js/modules/es.promise.try';\n")),(0,i.kt)("h3",{id:"web-polyfills"},"Web polyfills"),(0,i.kt)("p",null,"To include a web polyfill, import it in ",(0,i.kt)("inlineCode",{parentName:"p"},"polyfill.ts")," (and ensure the polyfill condition is updated)."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="polyfill.ts"',title:'"polyfill.ts"'},"import '@tinkoff/pack-polyfills';\n\nif (!('ResizeObserver' in window)) {\n  require('resize-observer-polyfill/dist/ResizeObserver.global');\n}\n")),(0,i.kt)("p",null,"Alternatively, add it to ",(0,i.kt)("inlineCode",{parentName:"p"},"modern.polyfill.ts")," if the API was recently introduced."),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="modern.polyfill.ts"',title:'"modern.polyfill.ts"'},"if (!('share' in window.navigator)) {\n  require('share-api-polyfill');\n}\n")))}c.isMDXComponent=!0}}]);