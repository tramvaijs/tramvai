"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[7776],{3905:function(e,n,t){t.d(n,{Zo:function(){return p},kt:function(){return l}});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function c(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var a=r.createContext({}),u=function(e){var n=r.useContext(a),t=n;return e&&(t="function"==typeof e?e(n):c(c({},n),e)),t},p=function(e){var n=u(e.components);return r.createElement(a.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},f=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,a=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),f=u(t),l=o,g=f["".concat(a,".").concat(l)]||f[l]||m[l]||i;return t?r.createElement(g,c(c({ref:n},p),{},{components:t})):r.createElement(g,c({ref:n},p))}));function l(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,c=new Array(i);c[0]=f;var s={};for(var a in n)hasOwnProperty.call(n,a)&&(s[a]=n[a]);s.originalType=e,s.mdxType="string"==typeof e?e:o,c[1]=s;for(var u=2;u<i;u++)c[u]=t[u];return r.createElement.apply(null,c)}return r.createElement.apply(null,t)}f.displayName="MDXCreateElement"},4426:function(e,n,t){t.r(n),t.d(n,{assets:function(){return a},contentTitle:function(){return c},default:function(){return m},frontMatter:function(){return i},metadata:function(){return s},toc:function(){return u}});var r=t(7462),o=(t(7294),t(3905));const i={},c=void 0,s={unversionedId:"references/tokens/metrics",id:"references/tokens/metrics",title:"metrics",description:"Tramvai tokens for integration and extension metric module.",source:"@site/tmp-docs/references/tokens/metrics.md",sourceDirName:"references/tokens",slug:"/references/tokens/metrics",permalink:"/docs/references/tokens/metrics",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/tokens/metrics.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"http-client",permalink:"/docs/references/tokens/http-client"},next:{title:"react-query",permalink:"/docs/references/tokens/react-query"}},a={},u=[{value:"Tokens list",id:"tokens-list",level:2}],p={toc:u};function m(e){let{components:n,...t}=e;return(0,o.kt)("wrapper",(0,r.Z)({},p,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Tramvai tokens for integration and extension ",(0,o.kt)("a",{parentName:"p",href:"/docs/references/modules/metrics"},"metric module"),"."),(0,o.kt)("h2",{id:"tokens-list"},"Tokens list"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createToken } from '@tinkoff/dippy';\nimport type {\n  Counter,\n  CounterConfiguration,\n  Gauge,\n  GaugeConfiguration,\n  Histogram,\n  HistogramConfiguration,\n  Summary,\n  SummaryConfiguration,\n} from 'prom-client';\n\ninterface Metrics {\n  counter<T extends string = string>(opt: CounterConfiguration<T>): Counter<T>;\n  gauge<T extends string = string>(opt: GaugeConfiguration<T>): Gauge<T>;\n  histogram<T extends string = string>(opt: HistogramConfiguration<T>): Histogram<T>;\n  summary<T extends string = string>(opt: SummaryConfiguration<T>): Summary<T>;\n}\n\nexport type ModuleConfig = {\n  enableConnectionResolveMetrics: boolean;\n};\n\nexport { Counter, Gauge, Histogram, Summary, Metrics };\n\n/**\n * @description\n * Metric module implementation\n */\nexport const METRICS_MODULE_TOKEN = createToken<Metrics>('metricsModule');\n\nexport interface MetricsServicesRegistryInterface {\n  register(url: string, serviceName: string): void;\n  registerEnv(env: Record<string, unknown>): void;\n  getServiceName(url: string, options?: Record<string, any>): string | void;\n}\n\n/**\n * @description\n * Utility for pointing out to metric module which service name to set for different requests\n */\nexport const METRICS_SERVICES_REGISTRY_TOKEN =\n  createToken<MetricsServicesRegistryInterface>('metricsServicesRegistry');\n\n/**\n * @description\n * Token for registering counter metric which can be incremented with POST papi request\n */\nexport const REGISTER_INSTANT_METRIC_TOKEN =\n  createToken<[string, Counter<string>]>('registerInstantMetric');\n\n/**\n * @description\n * Configuration for the metrics\n */\nexport const METRICS_MODULE_CONFIG_TOKEN = createToken<ModuleConfig>('metrics-module-config');\n\n"))))}m.isMDXComponent=!0}}]);