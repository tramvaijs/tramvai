"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9248],{3905:(e,n,t)=>{t.d(n,{Zo:()=>u,kt:()=>f});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function i(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)t=o[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=r.createContext({}),p=function(e){var n=r.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):i(i({},n),e)),t},u=function(e){var n=p(e.components);return r.createElement(c.Provider,{value:n},e.children)},m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),l=p(t),f=a,d=l["".concat(c,".").concat(f)]||l[f]||m[f]||o;return t?r.createElement(d,i(i({ref:n},u),{},{components:t})):r.createElement(d,i({ref:n},u))}));function f(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=t.length,i=new Array(o);i[0]=l;var s={};for(var c in n)hasOwnProperty.call(n,c)&&(s[c]=n[c]);s.originalType=e,s.mdxType="string"==typeof e?e:a,i[1]=s;for(var p=2;p<o;p++)i[p]=t[p];return r.createElement.apply(null,i)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},823:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>p,toc:()=>m});var r=t(7462),a=t(3366),o=(t(7294),t(3905)),i=["components"],s={id:"how-measure-navigation",title:"How to measure SPA navigation?"},c=void 0,p={unversionedId:"how-to/how-measure-navigation",id:"how-to/how-measure-navigation",title:"How to measure SPA navigation?",description:"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in this part of the documentation.",source:"@site/tmp-docs/how-to/how-measure-navigation.md",sourceDirName:"how-to",slug:"/how-to/how-measure-navigation",permalink:"/docs/how-to/how-measure-navigation",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/how-measure-navigation.md",tags:[],version:"current",frontMatter:{id:"how-measure-navigation",title:"How to measure SPA navigation?"},sidebar:"sidebar",previous:{title:"How to enable modern mode for an application?",permalink:"/docs/how-to/how-enable-modern"},next:{title:"react-query-usage",permalink:"/docs/how-to/react-query-usage"}},u={},m=[{value:"Recipe #1",id:"recipe-1",level:4},{value:"Recipe #2",id:"recipe-2",level:4}],l={toc:m};function f(e){var n=e.components,t=(0,a.Z)(e,i);return(0,o.kt)("wrapper",(0,r.Z)({},l,t,{components:n,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in ",(0,o.kt)("a",{parentName:"p",href:"/docs/features/routing/flow#client-spa-navigation"},"this part")," of the documentation."),(0,o.kt)("p",null,"So, if we want to measure how long it took us to go from one page to another, we can use the following recipes:"),(0,o.kt)("h4",{id:"recipe-1"},"Recipe #1"),(0,o.kt)("p",null,"Based on navigation hooks execution, it can be helpful if you have long after-navigate actions or tasks, which can seriously affect measurements."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"import { commandLineListTokens, declareModule, provide } from '@tramvai/core';\nimport { ROUTER_TOKEN } from '@tramvai/tokens-router';\n\n/*\n * You can use your own marks and measures; this is only an example\n * */\nexport const SpaTransitionPerformanceMetrics = declareModule({\n  name: 'SpaTransitionPerformanceMetrics',\n  providers: [\n    provide({\n      provide: commandLineListTokens.customerStart,\n      multi: true,\n      useFactory: ({ router }) => {\n        return () => {\n          router.registerHook('beforeResolve', async ({ key }) => {\n            const startKey = `router:spa-transition:start:${key}`;\n\n            performance.mark(startKey);\n          });\n\n          // If you want to include page actions in spa transition,\n          // you should use second recipe\n          router.registerHook('afterNavigate', async ({ key }) => {\n            const startKey = `router:spa-transition:start:${key}`;\n            const endKey = `router:spa-transition:end:${key}`;\n            const measureKey = `router:spa-transition:${key}`;\n\n            performance.mark(endKey);\n            performance.measure(measureKey, startKey, endKey);\n\n            performance.clearMeasures(measureKey);\n            [startKey, endKey].forEach((name) => performance.clearMarks(name));\n          });\n        };\n      },\n      deps: {\n        router: ROUTER_TOKEN,\n      },\n    }),\n  ],\n});\n")),(0,o.kt)("h4",{id:"recipe-2"},"Recipe #2"),(0,o.kt)("p",null,"Based on ",(0,o.kt)("inlineCode",{parentName:"p"},"commandLineRunner")," execution and runs upon ",(0,o.kt)("inlineCode",{parentName:"p"},"COMMAND_LINE_EXECUTION_END_TOKEN"),". It's more accurate measurement for spa navigation, but its result will be shown only after spa actions or tasks are executed."),(0,o.kt)("admonition",{type:"note"},(0,o.kt)("p",{parentName:"admonition"},"You shouldn't rely on current route in this type of recipe because it can be irrelevant to the execution context. Current route could have been changed a long time ago.")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-ts"},"export const SpaTransitionPerformanceMetrics = declareModule({\n  name: 'SpaTransitionPerformanceMetrics',\n  providers: [\n    provide({\n      provide: COMMAND_LINE_EXECUTION_END_TOKEN,\n      multi: true,\n      useValue: (di, type, status, timingInfo, key) => {\n        Object.keys(timingInfo).forEach((line) => {\n          const { start, end } = timingInfo[line];\n          const keyPostfix = isNil(key) ? '' : `:${key}`;\n\n          if (line === 'spa_transition' || line === 'after_spa_transition') {\n            const spaTransitionStartMark = `spa-transition-start:${keyPostfix}`;\n            const spaTransitionEndMark = `spa-transition-end:${keyPostfix}`;\n            const spaTransitionWithActionsEndMark = `spa-transition-with-actions-end:${keyPostfix}`;\n\n            if (line === 'spa_transition') {\n              performance.mark(spaTransitionStartMark, { startTime: start });\n            } else if (line === 'after_spa_transition') {\n              performance.mark(spaTransitionEndMark, { startTime: start });\n              performance.mark(spaTransitionWithActionsEndMark, { startTime: end });\n\n              const spaTransitionMeasureName = `spa-transition:${keyPostfix}`;\n              const spaTransitionWithActionsMeasureName = `spa-transition-with-actions:${keyPostfix}`;\n\n              performance.measure(\n                spaTransitionMeasureName,\n                spaTransitionStartMark,\n                spaTransitionEndMark\n              );\n              performance.measure(\n                spaTransitionWithActionsMeasureName,\n                spaTransitionStartMark,\n                spaTransitionWithActionsEndMark\n              );\n\n              performance.clearMarks(spaTransitionStartMark);\n              performance.clearMarks(spaTransitionEndMark);\n              performance.clearMarks(spaTransitionWithActionsEndMark);\n\n              performance.clearMeasures(spaTransitionMeasureName);\n              performance.clearMeasures(spaTransitionWithActionsMeasureName);\n            }\n          }\n        });\n      },\n    }),\n  ],\n});\n")))}f.isMDXComponent=!0}}]);