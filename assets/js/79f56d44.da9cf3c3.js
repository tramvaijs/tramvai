"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[9248],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var c=r.createContext({}),u=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=u(e.components);return r.createElement(c.Provider,{value:t},e.children)},m={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},l=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,c=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=u(n),f=o,d=l["".concat(c,".").concat(f)]||l[f]||m[f]||a;return n?r.createElement(d,i(i({ref:t},p),{},{components:n})):r.createElement(d,i({ref:t},p))}));function f(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=l;var s={};for(var c in t)hasOwnProperty.call(t,c)&&(s[c]=t[c]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var u=2;u<a;u++)i[u]=n[u];return r.createElement.apply(null,i)}return r.createElement.apply(null,n)}l.displayName="MDXCreateElement"},823:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>c,default:()=>f,frontMatter:()=>s,metadata:()=>u,toc:()=>m});var r=n(7462),o=n(3366),a=(n(7294),n(3905)),i=["components"],s={id:"how-measure-navigation",title:"How to measure SPA navigation?"},c=void 0,u={unversionedId:"how-to/how-measure-navigation",id:"how-to/how-measure-navigation",title:"How to measure SPA navigation?",description:"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in this part of the documentation.",source:"@site/tmp-docs/how-to/how-measure-navigation.md",sourceDirName:"how-to",slug:"/how-to/how-measure-navigation",permalink:"/docs/how-to/how-measure-navigation",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/get-started/overview.md/tmp-docs/how-to/how-measure-navigation.md",tags:[],version:"current",frontMatter:{id:"how-measure-navigation",title:"How to measure SPA navigation?"},sidebar:"sidebar",previous:{title:"How to enable modern mode for an application?",permalink:"/docs/how-to/how-enable-modern"},next:{title:"react-query-usage",permalink:"/docs/how-to/react-query-usage"}},p={},m=[],l={toc:m};function f(e){var t=e.components,n=(0,o.Z)(e,i);return(0,a.kt)("wrapper",(0,r.Z)({},l,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,"In order to measure the spa-transition performance between routes, you have to connect to the router hooks. You can read more about the flow of SPA-transition in ",(0,a.kt)("a",{parentName:"p",href:"/docs/features/routing/flow#client-spa-navigation"},"this part")," of the documentation."),(0,a.kt)("p",null,"So, if we want to measure how long it took us to go from one page to another, we can use the following recipe:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"import { declareModule, provide } from '@tramvai/core';\nimport { beforeResolveHooksToken, afterNavigateHooksToken } from '@tramvai/module-router';\n\n/*\n * You can use your own marks and measures; this is only an example\n * */\nexport const SpaTransitionPerformanceMetrics = declareModule({\n  name: 'SpaTransition',\n  providers: [\n    provide({\n      provide: beforeResolveHooksToken,\n      useValue: async () => {\n        // clear before init\n        performance.clearMeasures('spa-transition');\n        performance.clearMarks('spa-transition-start');\n        performance.clearMarks('spa-transition-end');\n\n        // mark start of spa-transition\n        performance.mark('spa-transition-start');\n      },\n    }),\n    provide({\n      provide: afterNavigateHooksToken,\n      useValue: async ({ from, to }) => {\n        performance.mark('spa-transition-end');\n        performance.measure('spa-transition', 'spa-transition-start', 'spa-transition-end');\n\n        console.log(\n          `duration: ${performance.getEntriesByName('spa-transition-new')[0]?.duration}`,\n          `from: ${from?.actualPath}`,\n          `to: ${to?.actualPath}`\n        );\n      },\n    }),\n  ],\n});\n")))}f.isMDXComponent=!0}}]);