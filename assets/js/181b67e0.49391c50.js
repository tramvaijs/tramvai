"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[8029],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return f}});var i=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);t&&(i=i.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,i)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,i,a=function(e,t){if(null==e)return{};var n,i,a={},o=Object.keys(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(i=0;i<o.length;i++)n=o[i],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var s=i.createContext({}),p=function(e){var t=i.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},c=function(e){var t=p(e.components);return i.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return i.createElement(i.Fragment,{},t)}},u=i.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=p(n),f=a,m=u["".concat(s,".").concat(f)]||u[f]||d[f]||o;return n?i.createElement(m,r(r({ref:t},c),{},{components:n})):i.createElement(m,r({ref:t},c))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,r=new Array(o);r[0]=u;var l={};for(var s in t)hasOwnProperty.call(t,s)&&(l[s]=t[s]);l.originalType=e,l.mdxType="string"==typeof e?e:a,r[1]=l;for(var p=2;p<o;p++)r[p]=n[p];return i.createElement.apply(null,r)}return i.createElement.apply(null,n)}u.displayName="MDXCreateElement"},2888:function(e,t,n){n.r(t),n.d(t,{assets:function(){return s},contentTitle:function(){return r},default:function(){return d},frontMatter:function(){return o},metadata:function(){return l},toc:function(){return p}});var i=n(7462),a=(n(7294),n(3905));const o={sidebar_position:2},r=void 0,l={unversionedId:"references/cli/config",id:"references/cli/config",title:"config",description:"@tramvai/cli requires that in the project root should exists config file named tramvai.json. This config should define projects that @tramvai/cli should handle.",source:"@site/tmp-docs/references/cli/config.md",sourceDirName:"references/cli",slug:"/references/cli/config",permalink:"/docs/references/cli/config",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/cli/config.md",tags:[],version:"current",sidebarPosition:2,frontMatter:{sidebar_position:2},sidebar:"sidebar",previous:{title:"base",permalink:"/docs/references/cli/base"},next:{title:"start",permalink:"/docs/references/cli/start"}},s={},p=[{value:"config file format",id:"config-file-format",level:2},{value:"JSON schema validation and autocomplete in IDEs",id:"json-schema-validation-and-autocomplete-in-ides",level:2},{value:"Available options",id:"available-options",level:2},{value:"polyfill",id:"polyfill",level:3},{value:"output",id:"output",level:3},{value:"serverApiDir",id:"serverapidir",level:3},{value:"sourceMap",id:"sourcemap",level:3},{value:"modern",id:"modern",level:3},{value:"fileSystemPages",id:"filesystempages",level:3},{value:"splitChunks",id:"splitchunks",level:3},{value:"define",id:"define",level:3},{value:"postcss",id:"postcss",level:3},{value:"config",id:"config",level:4},{value:"cssLocalIdentName",id:"csslocalidentname",level:4},{value:"transpileOnlyModernLibs",id:"transpileonlymodernlibs",level:3},{value:"hotRefresh",id:"hotrefresh",level:3},{value:"dedupe",id:"dedupe",level:3},{value:"svgo",id:"svgo",level:3},{value:"imageOptimization",id:"imageoptimization",level:3},{value:"options",id:"options",level:4},{value:"cssMinimize",id:"cssminimize",level:3},{value:"webpack",id:"webpack",level:3},{value:"resolveAlias",id:"resolvealias",level:4},{value:"provide",id:"provide",level:4},{value:"checkAsyncTs",id:"checkasyncts",level:3},{value:"threadLoader",id:"threadloader",level:3},{value:"notifications",id:"notifications",level:3},{value:"experiments",id:"experiments",level:3},{value:"Add new config parameters",id:"add-new-config-parameters",level:2}],c={toc:p};function d(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,i.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," requires that in the project root should exists config file named ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai.json"),". This config should define projects that ",(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," should handle."),(0,a.kt)("h2",{id:"config-file-format"},"config file format"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "projects": {\n    "react-app": {\n      "name": "new-app",\n      "root": "src",\n      "type": "application",\n      // other options\n    }\n  }\n}\n')),(0,a.kt)("ul",null,(0,a.kt)("li",{parentName:"ul"},(0,a.kt)("inlineCode",{parentName:"li"},"projects")," - map of the projects that resides in the current repository. ",(0,a.kt)("inlineCode",{parentName:"li"},"@tramvai/cli")," supports many apps and packages inside single repository (so called monorepo concept).")),(0,a.kt)("h2",{id:"json-schema-validation-and-autocomplete-in-ides"},"JSON schema validation and autocomplete in IDEs"),(0,a.kt)("p",null,"Link to the actual json schema for the ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai.json")," is ",(0,a.kt)("inlineCode",{parentName:"p"},"./node_modules/@tramvai/cli/schema.json")),(0,a.kt)("p",null,"The most simple way to add config validation and autocomplete is to add schema through field ",(0,a.kt)("inlineCode",{parentName:"p"},"$schema")," inside ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai.json"),":"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "$schema": "./node_modules/@tramvai/cli/schema.json",\n  "projects": {}\n}\n')),(0,a.kt)("p",null,"Another way is to add schema to the IDE settings:"),(0,a.kt)("p",null,"How to add schema to the ",(0,a.kt)("strong",{parentName:"p"},"JetBrains IDE")," you can find in the ",(0,a.kt)("a",{parentName:"p",href:"https://www.jetbrains.com/help/idea/json.html#ws_json_schema_add_custom"},"official docs"),". You also need to set ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai.json")," as file path pattern in settings."),(0,a.kt)("p",null,"How to add schema to the ",(0,a.kt)("strong",{parentName:"p"},"VSCode")," you can find in the ",(0,a.kt)("a",{parentName:"p",href:"https://code.visualstudio.com/docs/languages/json#_json-schemas-and-settings"},"official docs")),(0,a.kt)("blockquote",null,(0,a.kt)("p",{parentName:"blockquote"},"New projects generated by ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai new")," command already has field ",(0,a.kt)("inlineCode",{parentName:"p"},"$schema")," in their ",(0,a.kt)("inlineCode",{parentName:"p"},"tramvai.json")," config.")),(0,a.kt)("h2",{id:"available-options"},"Available options"),(0,a.kt)("h3",{id:"polyfill"},"polyfill"),(0,a.kt)("p",null,"Path to the polyfill file with all of the required polyfills. By default, file ",(0,a.kt)("inlineCode",{parentName:"p"},"postcss.config.js")," is used if it exists, otherwise polyfill bundle will not be generated"),(0,a.kt)("h3",{id:"output"},"output"),(0,a.kt)("p",null,"Specifies paths for the generated bundles."),(0,a.kt)("p",null,"For ",(0,a.kt)("inlineCode",{parentName:"p"},"type: application")," it's an object, and for other types it's a single string."),(0,a.kt)("h3",{id:"serverapidir"},"serverApiDir"),(0,a.kt)("p",null,"Path to folder with papi handlers"),(0,a.kt)("h3",{id:"sourcemap"},"sourceMap"),(0,a.kt)("p",null,"If sourcemaps are enabled"),(0,a.kt)("h3",{id:"modern"},"modern"),(0,a.kt)("p",null,"Enable build for modern browsers"),(0,a.kt)("h3",{id:"filesystempages"},"fileSystemPages"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/features/routing/file-system-pages"},"FileSystemPages doc")),(0,a.kt)("h3",{id:"splitchunks"},"splitChunks"),(0,a.kt)("p",null,"Configure the options on webpack splitChunks"),(0,a.kt)("h3",{id:"define"},"define"),(0,a.kt)("p",null,"Replaces passed strings with passed values in the build time for different environments"),(0,a.kt)("h3",{id:"postcss"},"postcss"),(0,a.kt)("p",null,"Postcss settings"),(0,a.kt)("h4",{id:"config"},"config"),(0,a.kt)("p",null,"Path to the postcss.config file"),(0,a.kt)("h4",{id:"csslocalidentname"},"cssLocalIdentName"),(0,a.kt)("p",null,"Specifies identifier for the css class names"),(0,a.kt)("h3",{id:"transpileonlymodernlibs"},"transpileOnlyModernLibs"),(0,a.kt)("p",null,"Transpile only part of node_modules that require transpilation. If option is disabled all of the node_modules are got transpiled"),(0,a.kt)("h3",{id:"hotrefresh"},"hotRefresh"),(0,a.kt)("p",null,"React hot-refresh"),(0,a.kt)("h3",{id:"dedupe"},"dedupe"),(0,a.kt)("p",null,"Controls the deduplication plugin"),(0,a.kt)("h3",{id:"svgo"},"svgo"),(0,a.kt)("p",null,"svgo-loader options"),(0,a.kt)("h3",{id:"imageoptimization"},"imageOptimization"),(0,a.kt)("p",null,"Config for the process of the image optimizations"),(0,a.kt)("h4",{id:"options"},"options"),(0,a.kt)("p",null,"For the detailed settings ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/tcoopman/image-webpack-loader#options"},"see")),(0,a.kt)("h3",{id:"cssminimize"},"cssMinimize"),(0,a.kt)("p",null,"Set minimizer for css"),(0,a.kt)("h3",{id:"webpack"},"webpack"),(0,a.kt)("p",null,"Webpack specific settings"),(0,a.kt)("h4",{id:"resolvealias"},"resolveAlias"),(0,a.kt)("p",null,'Browser package resolve aliases. E.g. { "stream": "stream-browserify" }'),(0,a.kt)("h4",{id:"provide"},"provide"),(0,a.kt)("p",null,'Browser packages to provide with ProvidePlugin. E.g. { "Buffer": ','["buffer", "Buffer"]'," }"),(0,a.kt)("h3",{id:"checkasyncts"},"checkAsyncTs"),(0,a.kt)("p",null,"Configuration for fork-ts-checker-webpack-plugin"),(0,a.kt)("h3",{id:"threadloader"},"threadLoader"),(0,a.kt)("p",null,"Config for the multithread build process (",(0,a.kt)("a",{parentName:"p",href:"https://webpack.js.org/loaders/thread-loader/"},"https://webpack.js.org/loaders/thread-loader/"),")."),(0,a.kt)("h3",{id:"notifications"},"notifications"),(0,a.kt)("p",null,"Control the build notifications that are showed during development"),(0,a.kt)("h3",{id:"experiments"},"experiments"),(0,a.kt)("p",null,"See ",(0,a.kt)("a",{parentName:"p",href:"/docs/references/cli/experiments"},"experiments doc")),(0,a.kt)("h2",{id:"add-new-config-parameters"},"Add new config parameters"),(0,a.kt)("p",null,"Config parameters for the ",(0,a.kt)("inlineCode",{parentName:"p"},"@tramvai/cli")," are stored as TypeScript interface from which JSON Schema is generating. This schema is used for the config validation and applying config defaults, thanks to the library ",(0,a.kt)("a",{parentName:"p",href:"https://github.com/ajv-validator/ajv"},"ajv"),"."))}d.isMDXComponent=!0}}]);