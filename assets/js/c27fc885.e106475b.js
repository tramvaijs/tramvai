"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[1819],{3905:(e,t,n)=>{n.d(t,{Zo:()=>d,kt:()=>m});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),s=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=s(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=l(e,["components","mdxType","originalType","parentName"]),u=s(n),m=i,h=u["".concat(p,".").concat(m)]||u[m]||c[m]||r;return n?a.createElement(h,o(o({ref:t},d),{},{components:n})):a.createElement(h,o({ref:t},d))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var s=2;s<r;s++)o[s]=n[s];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},7003:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>C,frontMatter:()=>l,metadata:()=>s,toc:()=>c});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],l={id:"contracts",title:"Contracts"},p=void 0,s={unversionedId:"features/child-app/contracts",id:"features/child-app/contracts",title:"Contracts",description:"Explanation",source:"@site/tmp-docs/03-features/015-child-app/015-contracts.md",sourceDirName:"03-features/015-child-app",slug:"/features/child-app/contracts",permalink:"/docs/features/child-app/contracts",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/03-features/015-child-app/015-contracts.md",tags:[],version:"current",sidebarPosition:15,frontMatter:{id:"contracts",title:"Contracts"},sidebar:"sidebar",previous:{title:"Module Federation (shared dependencies)",permalink:"/docs/features/child-app/module-federation"},next:{title:"Add Child App without CLI",permalink:"/docs/features/child-app/add-child-app-without-cli"}},d={},c=[{value:"Explanation",id:"explanation",level:2},{value:"Default dependencies relationship",id:"default-dependencies-relationship",level:3},{value:"Contracts and dependencies",id:"contracts-and-dependencies",level:3},{value:"Usage",id:"usage",level:2},{value:"Restricting access to DI container",id:"restricting-access-to-di-container",level:3},{value:"Request dependency in Child App",id:"request-dependency-in-child-app",level:3},{value:"Provide dependency in Host application",id:"provide-dependency-in-host-application",level:3},{value:"Request dependency in Host application",id:"request-dependency-in-host-application",level:3},{value:"Provide dependency in Child App",id:"provide-dependency-in-child-app",level:3},{value:"Contracts validation",id:"contracts-validation",level:3},{value:"FAQ",id:"faq",level:2},{value:"How to deliver Contracts for Child Apps and Host applications?",id:"how-to-deliver-contracts-for-child-apps-and-host-applications",level:3},{value:"How to migrate to Contracts incrementally?",id:"how-to-migrate-to-contracts-incrementally",level:3}],u=function(e){return function(t){return console.warn("Component "+e+" was not imported, exported, or provided by MDXProvider as global scope"),(0,r.kt)("div",t)}},m=u("Tabs"),h=u("TabItem"),f={toc:c};function C(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},f,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h2",{id:"explanation"},"Explanation"),(0,r.kt)("p",null,"Microfrontends and Host applications can have a different set of relations, and most of them can be defined in two ways:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Microfront requires dependency from Host"),(0,r.kt)("li",{parentName:"ul"},"Host requires dependency from Microfront")),(0,r.kt)("p",null,"In Child Apps world, there is a few different types of dependencies, which can be required in microfrontend:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/features/child-app/workflow#dependency-injection"},"providers from host DI container")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/features/child-app/state-management#how-to-subscribe-to-root-app-store"},"state from host application")),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("a",{parentName:"li",href:"/docs/features/child-app/module-federation"},"shared libraries"))),(0,r.kt)("p",null,"Shared libraries is out of the scope of this guide, because different mechanism covers it - Module Federation."),(0,r.kt)("p",null,"Host state subscription is a special case of working with Root DI container."),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Contracts")," mechanism, which will be explained in this guide, will cover two-way dependencies relationship between Microfront and Host."),(0,r.kt)("h3",{id:"default-dependencies-relationship"},"Default dependencies relationship"),(0,r.kt)("p",null,"By default, Child App has ",(0,r.kt)("strong",{parentName:"p"},"full access")," to Root application DI container, as described in ",(0,r.kt)("a",{parentName:"p",href:"/docs/features/child-app/workflow#dependency-injection"},"this schema"),"."),(0,r.kt)("p",null,"This behavior allows to write less and ship faster, but also it is unsafe and can lead to bugs in producion environment:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Child App and Host application has different release cycles"),(0,r.kt)("li",{parentName:"ul"},"Dependencies interfaces can be changed without backward compatibility"),(0,r.kt)("li",{parentName:"ul"},"Dependencies can be not provided or removed")),(0,r.kt)("p",null,"Contracts mechanism was created to address these issues."),(0,r.kt)("h3",{id:"contracts-and-dependencies"},"Contracts and dependencies"),(0,r.kt)("p",null,"With Contracts, access to Root DI container is ",(0,r.kt)("strong",{parentName:"p"},"strictly limited")," at Host application level. Only few core ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," dependencies are available out of the box, and we can guarantee this dependencies compatibility between different Child App and Host application ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," versions because of our matrix of integration tests."),(0,r.kt)("p",null,"Contracts are composed of several elements:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"specific Child Apps DI acces mode"),(0,r.kt)("li",{parentName:"ul"},"list of providers, which are passed from Root DI to Child App"),(0,r.kt)("li",{parentName:"ul"},"list of providers, which are required in Child App"),(0,r.kt)("li",{parentName:"ul"},"list of providers, which are passed from Child App DI to Host App"),(0,r.kt)("li",{parentName:"ul"},"list of providers, which are required in Host App"),(0,r.kt)("li",{parentName:"ul"},"contracts management and validation"),(0,r.kt)("li",{parentName:"ul"},"strong typing for contracts")),(0,r.kt)("p",null,"In a nutshell, contract is a usual ",(0,r.kt)("inlineCode",{parentName:"p"},"tramvai")," ",(0,r.kt)("a",{parentName:"p",href:"/docs/concepts/provider"},"provider"),", which is required in one side and provided in another."),(0,r.kt)("h2",{id:"usage"},"Usage"),(0,r.kt)("p",null,"Contracts already integrated in ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/module-child-app")," module, no extra dependencies needed. "),(0,r.kt)("h3",{id:"restricting-access-to-di-container"},"Restricting access to DI container"),(0,r.kt)("p",null,"For ability to incremental migration, there is a two access modes to Root DI from Child App:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"whitelist")," - full access to Root DI only for specified Child Apps"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"blacklist")," - full access to Root DI  for all Child Apps except specified")),(0,r.kt)("p",null,"For example, if you want to migrate ",(0,r.kt)("inlineCode",{parentName:"p"},"header")," Child App to Contracts mechanism, provide this ",(0,r.kt)("inlineCode",{parentName:"p"},"CHILD_APP_ROOT_DI_ACCESS_MODE_TOKEN")," token in Host application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/index.ts"',title:'"host/index.ts"'},"import { CHILD_APP_ROOT_DI_ACCESS_MODE_TOKEN } from '@tramvai/tokens-child-app';\n\nconst provider = provide({\n  provide: CHILD_APP_ROOT_DI_ACCESS_MODE_TOKEN,\n  useValue: {\n    mode: 'blacklist',\n    list: ['header'],\n  },\n});\n")),(0,r.kt)("h3",{id:"request-dependency-in-child-app"},"Request dependency in Child App"),(0,r.kt)("p",null,"When access to Root DI is limited, we need to define required dependencies in Child App:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="header/index.ts"',title:'"header/index.ts"'},"import { CHILD_REQUIRED_CONTRACTS } from '@tramvai/tokens-child-app';\n\nconst provider = provide({\n  provide: CHILD_REQUIRED_CONTRACTS,\n  useValue: [MY_CHILD_CONTRACT],\n});\n")),(0,r.kt)("p",null,"This token can be resolved from Child App DI container (when provided in Host application):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="child/cmp.tsx"',title:'"child/cmp.tsx"'},"const Cmp = () => {\n  const myChildContract = useDi(MY_CHILD_CONTRACT);\n\n  return '...';\n};\n")),(0,r.kt)("h3",{id:"provide-dependency-in-host-application"},"Provide dependency in Host application"),(0,r.kt)("p",null,"Based on previous example, we need to declare and provide ",(0,r.kt)("inlineCode",{parentName:"p"},"MY_CHILD_CONTRACT")," implementation in Host application:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/index.ts"',title:'"host/index.ts"'},"import { HOST_PROVIDED_CONTRACTS } from '@tramvai/tokens-child-app';\n\nconst providers = [\n  // declare provided contracts here\n  provide({\n    provide: HOST_PROVIDED_CONTRACTS,\n    useValue: {\n      // optional field, if not specified - contracts will be provided for any Child App\n      childAppName: 'header',\n      providedContracts: [MY_CHILD_CONTRACT],\n    },\n  }),\n  // implement provided contracts somewhere in Host providers and modules\n  provide({\n    provide: MY_CHILD_CONTRACT,\n    useClass: MyChildContractImpl,\n  }),\n];\n")),(0,r.kt)("h3",{id:"request-dependency-in-host-application"},"Request dependency in Host application"),(0,r.kt)("p",null,"Sometimes we need to request dependency from Child App in Host application, for example to manually submit microfronted form:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/index.ts"',title:'"host/index.ts"'},"import { HOST_REQUIRED_CONTRACTS } from '@tramvai/tokens-child-app';\n\nconst provider = provide({\n  provide: HOST_REQUIRED_CONTRACTS,\n  useValue: {\n    childAppName: 'form',\n    requiredContracts: [FORM_CONTRACT],\n  },\n});\n")),(0,r.kt)("p",null,"This token can be resolved from Host DI container with ",(0,r.kt)("inlineCode",{parentName:"p"},"ContractManager")," (when provided in Child App used on the current page):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/routes/index.tsx"',title:'"host/routes/index.tsx"'},"const submitChildAppForm = declareAction({\n  name: 'submitChildAppForm',\n  async fn() {\n    const { childContractManager } = this.deps;\n\n    // `getChildProvidedContract` is async, because we need to wait for Child App loading\n    const formContract = await childContractManager.getChildProvidedContract('form', FORM_CONTRACT);\n\n    // it is always a chance that Child App loading can be failed and contract will be undefined\n    formContract?.submit();\n  },\n  deps: {\n    childContractManager: CHILD_APP_CONTRACT_MANAGER,\n  },\n});\n")),(0,r.kt)("h3",{id:"provide-dependency-in-child-app"},"Provide dependency in Child App"),(0,r.kt)("p",null,"Based on previous example, we need to declare and provide ",(0,r.kt)("inlineCode",{parentName:"p"},"FORM_CONTRACT")," implementation in Child App:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="form/index.ts"',title:'"form/index.ts"'},"import { CHILD_PROVIDED_CONTRACTS } from '@tramvai/tokens-child-app';\n\nconst providers = [\n  // declare provided contracts here\n  provide({\n    provide: CHILD_PROVIDED_CONTRACTS,\n    useValue: [FORM_CONTRACT],\n  }),\n  // implement provided contracts somewhere in Child App providers and modules\n  provide({\n    provide: FORM_CONTRACT,\n    useClass: FormContractImpl,\n  }),\n];\n")),(0,r.kt)("h3",{id:"contracts-validation"},"Contracts validation"),(0,r.kt)("p",null,"Full contracts compatibility validation is possible only in runtime, because microfrontends and host app can be released in different times with different expected contracts versions."),(0,r.kt)("p",null,"But it doesn't mean that build-time validation is useless, and we can use type-checking in Host application to fail build pipeline (if contracts are not compatible)."),(0,r.kt)("p",null,"At first, we need to add some boilerplate code in Host entry point to validate contracts types:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/index.ts"',title:'"host/index.ts"'},"import { Assert, ContractsValidation } from '@tramvai/tokens-child-app';\n\n// if contracts are not compatible, human readable error will be thrown on type check\nAssert({} as ContractsValidation);\n")),(0,r.kt)("p",null,"For Child required contracts, we need to extend required contracts interface next to the contract token:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="header-contract/index.ts"',title:'"header-contract/index.ts"'},"// `TypedContractsRequired` will be extended when `FORM_CONTRACT` will be imported in Host application\ndeclare module '@tramvai/module-child-app' {\n  export interface TypedContractsRequired {\n    // fail validation if this token is not provided in host application\n    MY_CHILD_CONTRACT: typeof MY_CHILD_CONTRACT;\n  }\n}\n\nexport const MY_CHILD_CONTRACT = createToken<MyChildContract>('my child contract');\n")),(0,r.kt)("p",null,"In Host application, we need to extend provided contracts interface before ",(0,r.kt)("inlineCode",{parentName:"p"},"Assert")," helper call (and of course we need to provide this contract):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts",metastring:'title="host/index.ts"',title:'"host/index.ts"'},"declare module '@tramvai/module-child-app' {\n  export interface TypedContractsProvided {\n    // fail validation if this token has a incompatible type in `TypedContractsRequired` interface\n    MY_CHILD_CONTRACT: typeof MY_CHILD_CONTRACT;\n  }\n}\n")),(0,r.kt)("h2",{id:"faq"},"FAQ"),(0,r.kt)("h3",{id:"how-to-deliver-contracts-for-child-apps-and-host-applications"},"How to deliver Contracts for Child Apps and Host applications?"),(0,r.kt)("p",null,"TL;DR - provide Contracts as separate npm packages (one package for one or multiple Child Apps), update this packages as infrequently as you can."),(0,r.kt)("p",null,"Delivering Contracts as npm packages provides the following benefits:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"versioning out of the box"),(0,r.kt)("li",{parentName:"ul"},"reusability between microfrontends and host applications")),(0,r.kt)("p",null,"Tramvai tokens chosen for Contracts declaration because of ability to provide strong typing and seamless integration with DI system."),(0,r.kt)("p",null,"So the contracts for Child Apps are set of Tramvai tokens wrapped in npm package. ",(0,r.kt)("inlineCode",{parentName:"p"},"@tramvai/build")," can be used to build these packages."),(0,r.kt)("p",null,"For example:"),(0,r.kt)(m,{mdxType:"Tabs"},(0,r.kt)(h,{value:"json",label:"package.json",default:!0,mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-json",metastring:'title="header-contract/package.json"',title:'"header-contract/package.json"'},'{\n  "name": "@scope/header-contract",\n  "version": "1.0.0",\n  "main": "index.js",\n  "module": "index.es.js",\n  "scripts": {\n    "build": "tramvai-build --forPublish --preserveModules",\n    "watch": "tsc -w"\n  },\n  "dependencies": {\n    "@tinkoff/dippy": "^0.9.0"\n  },\n  "peerDependencies": {\n    "@tramvai/module-child-app": ">=3.0.0"\n  },\n  "devDependencies": {\n    "@tramvai/build": "^4.1.3",\n    "@tramvai/module-child-app": "^3.40.67"\n  }\n}\n'))),(0,r.kt)(h,{value:"ts",label:"index.ts",mdxType:"TabItem"},(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx",metastring:'title="header-contract/index.ts"',title:'"header-contract/index.ts"'},"import { createToken } from '@tinkoff/dippy';\n\ndeclare module '@tramvai/module-child-app' {\n  export interface TypedContractsProvided {\n    MY_HEADER_CONTRACT: MyHeaderContract;\n  }\n}\n\nexport type MyHeaderContract = any;\n\nexport const MY_HEADER_CONTRACT = createToken<MyHeaderContract>('scope:my_header_contract');\n")))),(0,r.kt)("h3",{id:"how-to-migrate-to-contracts-incrementally"},"How to migrate to Contracts incrementally?"),(0,r.kt)("p",null,"@todo"))}C.isMDXComponent=!0}}]);