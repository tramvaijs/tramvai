"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[4025],{3905:(e,t,n)=>{n.d(t,{Zo:()=>c,kt:()=>m});var r=n(7294);function o(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?a(Object(n),!0).forEach((function(t){o(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):a(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function i(e,t){if(null==e)return{};var n,r,o=function(e,t){if(null==e)return{};var n,r,o={},a=Object.keys(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||(o[n]=e[n]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var l=r.createContext({}),p=function(e){var t=r.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},c=function(e){var t=p(e.components);return r.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},d=r.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,c=i(e,["components","mdxType","originalType","parentName"]),d=p(n),m=o,k=d["".concat(l,".").concat(m)]||d[m]||u[m]||a;return n?r.createElement(k,s(s({ref:t},c),{},{components:n})):r.createElement(k,s({ref:t},c))}));function m(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,s=new Array(a);s[0]=d;var i={};for(var l in t)hasOwnProperty.call(t,l)&&(i[l]=t[l]);i.originalType=e,i.mdxType="string"==typeof e?e:o,s[1]=i;for(var p=2;p<a;p++)s[p]=n[p];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>s});var r=n(7294),o=n(6010);const a="tabItem_Ymn6";function s({children:e,hidden:t,className:n}){return r.createElement("div",{role:"tabpanel",className:(0,o.Z)(a,n),hidden:t},e)}},4866:(e,t,n)=>{n.d(t,{Z:()=>N});var r=n(7462),o=n(7294),a=n(6010),s=n(2466),i=n(6550),l=n(1980),p=n(7392),c=n(12);function u(e){return function(e){return o.Children.map(e,(e=>{if((0,o.isValidElement)(e)&&"value"in e.props)return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))}(e).map((({props:{value:e,label:t,attributes:n,default:r}})=>({value:e,label:t,attributes:n,default:r})))}function d(e){const{values:t,children:n}=e;return(0,o.useMemo)((()=>{const e=t??u(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function m({value:e,tabValues:t}){return t.some((t=>t.value===e))}function k({queryString:e=!1,groupId:t}){const n=(0,i.k6)(),r=function({queryString:e=!1,groupId:t}){if("string"==typeof e)return e;if(!1===e)return null;if(!0===e&&!t)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return t??null}({queryString:e,groupId:t});return[(0,l._X)(r),(0,o.useCallback)((e=>{if(!r)return;const t=new URLSearchParams(n.location.search);t.set(r,e),n.replace({...n.location,search:t.toString()})}),[r,n])]}function f(e){const{defaultValue:t,queryString:n=!1,groupId:r}=e,a=d(e),[s,i]=(0,o.useState)((()=>function({defaultValue:e,tabValues:t}){if(0===t.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(e){if(!m({value:e,tabValues:t}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${e}" but none of its children has the corresponding value. Available values are: ${t.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return e}const n=t.find((e=>e.default))??t[0];if(!n)throw new Error("Unexpected error: 0 tabValues");return n.value}({defaultValue:t,tabValues:a}))),[l,p]=k({queryString:n,groupId:r}),[u,f]=function({groupId:e}){const t=function(e){return e?`docusaurus.tab.${e}`:null}(e),[n,r]=(0,c.Nk)(t);return[n,(0,o.useCallback)((e=>{t&&r.set(e)}),[t,r])]}({groupId:r}),h=(()=>{const e=l??u;return m({value:e,tabValues:a})?e:null})();(0,o.useLayoutEffect)((()=>{h&&i(h)}),[h]);return{selectedValue:s,selectValue:(0,o.useCallback)((e=>{if(!m({value:e,tabValues:a}))throw new Error(`Can't select invalid tab value=${e}`);i(e),p(e),f(e)}),[p,f,a]),tabValues:a}}var h=n(2389);const g="tabList__CuJ",b="tabItem_LNqP";function y({className:e,block:t,selectedValue:n,selectValue:i,tabValues:l}){const p=[],{blockElementScrollPositionUntilNextRender:c}=(0,s.o5)(),u=e=>{const t=e.currentTarget,r=p.indexOf(t),o=l[r].value;o!==n&&(c(t),i(o))},d=e=>{let t=null;switch(e.key){case"Enter":u(e);break;case"ArrowRight":{const n=p.indexOf(e.currentTarget)+1;t=p[n]??p[0];break}case"ArrowLeft":{const n=p.indexOf(e.currentTarget)-1;t=p[n]??p[p.length-1];break}}t?.focus()};return o.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,a.Z)("tabs",{"tabs--block":t},e)},l.map((({value:e,label:t,attributes:s})=>o.createElement("li",(0,r.Z)({role:"tab",tabIndex:n===e?0:-1,"aria-selected":n===e,key:e,ref:e=>p.push(e),onKeyDown:d,onClick:u},s,{className:(0,a.Z)("tabs__item",b,s?.className,{"tabs__item--active":n===e})}),t??e))))}function v({lazy:e,children:t,selectedValue:n}){if(t=Array.isArray(t)?t:[t],e){const e=t.find((e=>e.props.value===n));return e?(0,o.cloneElement)(e,{className:"margin-top--md"}):null}return o.createElement("div",{className:"margin-top--md"},t.map(((e,t)=>(0,o.cloneElement)(e,{key:t,hidden:e.props.value!==n}))))}function w(e){const t=f(e);return o.createElement("div",{className:(0,a.Z)("tabs-container",g)},o.createElement(y,(0,r.Z)({},e,t)),o.createElement(v,(0,r.Z)({},e,t)))}function N(e){const t=(0,h.Z)();return o.createElement(w,(0,r.Z)({key:String(t)},e))}},5290:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>l,default:()=>m,frontMatter:()=>i,metadata:()=>p,toc:()=>u});var r=n(7462),o=(n(7294),n(3905)),a=n(4866),s=n(5162);const i={},l=void 0,p={unversionedId:"references/libs/mocker",id:"references/libs/mocker",title:"mocker",description:"A server and a middleware for API mocking.",source:"@site/tmp-docs/references/libs/mocker.md",sourceDirName:"references/libs",slug:"/references/libs/mocker",permalink:"/docs/references/libs/mocker",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/libs/mocker.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"minicss",permalink:"/docs/references/libs/minicss"},next:{title:"module-loader-client",permalink:"/docs/references/libs/module-loader-client"}},c={},u=[{value:"Installation",id:"installation",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Routing",id:"routing",level:3},{value:"FileSystem mocks",id:"filesystem-mocks",level:3},{value:"API",id:"api",level:2},{value:"Mocker",id:"mocker",level:3},{value:"MockerOptions",id:"mockeroptions",level:3},{value:"MockRepository",id:"mockrepository",level:3},{value:"How to",id:"how-to",level:2},{value:"How to mock request with specific query parameters?",id:"how-to-mock-request-with-specific-query-parameters",level:3},{value:"How to proxy specific request to source API?",id:"how-to-proxy-specific-request-to-source-api",level:3}],d={toc:u};function m({components:e,...t}){return(0,o.kt)("wrapper",(0,r.Z)({},d,t,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"A server and a middleware for API mocking."),(0,o.kt)("h2",{id:"installation"},"Installation"),(0,o.kt)("p",null,"Install ",(0,o.kt)("inlineCode",{parentName:"p"},"@tinkoff/mocker"),":"),(0,o.kt)(a.Z,{groupId:"npm2yarn",mdxType:"Tabs"},(0,o.kt)(s.Z,{value:"npm",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"npm install @tinkoff/mocker\n"))),(0,o.kt)(s.Z,{value:"yarn",label:"Yarn",mdxType:"TabItem"},(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-bash"},"yarn add @tinkoff/mocker\n")))),(0,o.kt)("p",null,"Add your first mock to file ",(0,o.kt)("inlineCode",{parentName:"p"},"mocks/first-api.js"),":"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"module.exports = {\n  api: 'first-api',\n  mocks: {\n    'GET /endpoint': {\n      status: 200,\n      headers: {},\n      payload: 'mocked response',\n    },\n  },\n};\n")),(0,o.kt)("p",null,"Set up mocker in your project:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"import { Mocker, FileSystemMockRepository } from '@tinkoff/mocker';\n\n// Repository will read mocks from directory `mocks` relative from current dir\nconst repository = new FileSystemMockRepository({ cwd: process.cwd(), root: 'mocks' });\n// Mocker to all of the request on `/first-api/...` will response with mock found in fs or with proxying request to the source API\nconst options = {\n  apis: {\n    'first-api': {\n      target: 'https://real-first-api.com/',\n    },\n  },\n  passUnhandledRequests: true,\n};\n\nconst mocker = new Mocker({ repositories: [repository], logger: console, ...options });\n\n(async () => {\n  // with this call mocker reads mocks from repository and creates according routes\n  await mocker.init();\n\n  mocker.start(4000, () => {\n    console.log('Mocker is running at 4000 port');\n  });\n})();\n")),(0,o.kt)("p",null,"Now we can make a ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," request to mocker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"(async () => {\n  const response = await fetch('http://localhost:4000/first-api/endpoint');\n  const data = await response.json();\n\n  console.log(data); // \"mocked response\"\n})();\n")),(0,o.kt)("h2",{id:"explanation"},"Explanation"),(0,o.kt)("p",null,"Library is based on ",(0,o.kt)("a",{parentName:"p",href:"https://expressjs.com/"},"express"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"mocker")," can be used as standalone server or as a middleware for existing server through call ",(0,o.kt)("inlineCode",{parentName:"p"},"mocker.use(req, res)"),"."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FileSystemMockRepository")," supports mock in ",(0,o.kt)("inlineCode",{parentName:"p"},"js")," \u0438 ",(0,o.kt)("inlineCode",{parentName:"p"},"json")," formats. ",(0,o.kt)("inlineCode",{parentName:"p"},"js")," mocks are able to define custom ",(0,o.kt)("inlineCode",{parentName:"p"},"express")," handler as a mock handler."),(0,o.kt)("p",null,"For choosing right mock for request next parameters of the request are considered: ",(0,o.kt)("inlineCode",{parentName:"p"},"method"),", ",(0,o.kt)("inlineCode",{parentName:"p"},"url")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"query"),"."),(0,o.kt)("p",null,"Mocker supports proxying requests to API that allows to mock only part of the API and not a whole backend"),(0,o.kt)("h3",{id:"routing"},"Routing"),(0,o.kt)("p",null,"If mocker is running as a standalone server, for example on 4000 port, then it will be accessible at url ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:4000/"),"."),(0,o.kt)("p",null,"For every api from settings ",(0,o.kt)("inlineCode",{parentName:"p"},"options.apis")," will be created a nester router, e.g. for ",(0,o.kt)("inlineCode",{parentName:"p"},"first-api")," it will be ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:4000/first-api/"),"."),(0,o.kt)("p",null,"Routes for ",(0,o.kt)("inlineCode",{parentName:"p"},"api")," are getting created based on mocks, in which key is a method + url of the request, e.g. mock ",(0,o.kt)("inlineCode",{parentName:"p"},"GET /endpoint")," will be accessible at ",(0,o.kt)("inlineCode",{parentName:"p"},"http://localhost:4000/first-api/endpoint")," for ",(0,o.kt)("inlineCode",{parentName:"p"},"GET")," requests."),(0,o.kt)("h3",{id:"filesystem-mocks"},"FileSystem mocks"),(0,o.kt)("p",null,"Mocker reads mocks using Repository, that allows to store mocks in FileSystem or on the another server."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"FileSystemMockRepository")," works with FileSystem and supports next kinds of mocks:"),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mock.json")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-json"},'{\n  "api": "first-api",\n  "mocks": {\n    "GET /foo": {\n      "status": 200,\n      "headers": {},\n      "payload": {\n        "fake": "true"\n      }\n    }\n  }\n}\n')),(0,o.kt)("p",null,(0,o.kt)("strong",{parentName:"p"},"mock.js")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"module.exports = {\n  api: 'first-api',\n  mocks: {\n    'GET /bar': {\n      status: 200,\n      headers: {},\n      payload: {\n        fake: 'true',\n      },\n    },\n    'POST /bar': (req, res) => {\n      res.status(200);\n      res.set('X-Mock-Server', 'true');\n      res.json({ fake: 'true' });\n    },\n  },\n};\n")),(0,o.kt)("h2",{id:"api"},"API"),(0,o.kt)("h3",{id:"mocker"},"Mocker"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface Mocker {\n  new (params: { options: MockerOptions; repository: MockRepository; logger: Logger }): Mocker;\n\n  init(): Promise<void>;\n\n  update(): Promise<void>;\n\n  use(req: IncomingMessage, res: ServerResponse): express.Express;\n\n  start(port: number, callback?: (...args: any[]) => void): Server;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mocker.init")," - resolve mocks using ",(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository"),", routing initialization. Must be called before using server with mocks."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mocker.update")," - updating mocks using ",(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository"),", routing update. Might be called in runtime."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mocker.use")," - ",(0,o.kt)("inlineCode",{parentName:"p"},"express")," middleware. Might be used for adding mocker on the existing server."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"Mocker.start")," - run mocker as a standalone http-server."),(0,o.kt)("h3",{id:"mockeroptions"},"MockerOptions"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface MockerOptions {\n  apis: Record<string, { target: string }>;\n  passUnhandledRequests?: boolean;\n  apiRoutePrefix?: string;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockerOptions.apis")," - list of APIs for mocking, key ",(0,o.kt)("inlineCode",{parentName:"p"},"target")," points to the source API."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockerOptions.passUnhandledRequests")," - when enabled, all of the request without according mock will be proxied to the ",(0,o.kt)("inlineCode",{parentName:"p"},"target"),", otherwise fail the request."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockerOptions.apiRoutePrefix")," - if mocker is used in existing server on nested route, e.g. ",(0,o.kt)("inlineCode",{parentName:"p"},"/mocker"),", this option might be used to pass this route as ",(0,o.kt)("inlineCode",{parentName:"p"},"apiRoutePrefix")," for proper routing."),(0,o.kt)("h3",{id:"mockrepository"},"MockRepository"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"interface MockRepository {\n  get(api: string, endpoint: string): Promise<Mock>;\n\n  getAll(api: string): Promise<Record<string, Mock>>;\n\n  add(api: string, endpoint: string, mock: Mock): Promise<void>;\n\n  delete(api: string, endpoint: string): Promise<void>;\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository.getAll")," - get all mocks for specified API."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository.get")," - get specific mock for specific API."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository.add")," - add new mock for specific API."),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"MockRepository.delete")," - remove specific mock for specific API."),(0,o.kt)("h2",{id:"how-to"},"How to"),(0,o.kt)("h3",{id:"how-to-mock-request-with-specific-query-parameters"},"How to mock request with specific query parameters?"),(0,o.kt)("p",null,"Mocker allows to specify query parameters for mocks."),(0,o.kt)("p",null,"In the example below request to ",(0,o.kt)("inlineCode",{parentName:"p"},"/endpoint?foo=bar")," will be mocked with first mock, and request to ",(0,o.kt)("inlineCode",{parentName:"p"},"/endpoint?foo=baz")," will be mocked with second. All of the other requests with\\without query will be proxied to source API (if ",(0,o.kt)("inlineCode",{parentName:"p"},"passUnhandledRequests")," is enabled)."),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"module.exports = {\n  api: 'api',\n  mocks: {\n    'GET /endpoint?foo=bar': {\n      status: 200,\n      headers: {},\n      payload: 'mocked bar response',\n    },\n    'GET /endpoint?foo=baz': {\n      status: 200,\n      headers: {},\n      payload: 'mocked baz response',\n    },\n  },\n};\n")),(0,o.kt)("h3",{id:"how-to-proxy-specific-request-to-source-api"},"How to proxy specific request to source API?"),(0,o.kt)("p",null,"It might be useful if option ",(0,o.kt)("inlineCode",{parentName:"p"},"passUnhandledRequests")," is disabled. In that case you may pass option ",(0,o.kt)("inlineCode",{parentName:"p"},"pass: true")," to mock:"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-tsx"},"module.exports = {\n  api: 'api',\n  mocks: {\n    'ALL /endpoint': {\n      pass: true,\n    },\n  },\n};\n")))}m.isMDXComponent=!0}}]);