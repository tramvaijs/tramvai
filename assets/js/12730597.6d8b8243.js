"use strict";(globalThis.webpackChunk=globalThis.webpackChunk||[]).push([[9086],{3905:(e,n,t)=>{t.d(n,{Zo:()=>p,kt:()=>f});var r=t(7294);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var u=r.createContext({}),c=function(e){var n=r.useContext(u),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=c(e.components);return r.createElement(u.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},l=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,u=e.parentName,p=s(e,["components","mdxType","originalType","parentName"]),l=c(t),f=o,m=l["".concat(u,".").concat(f)]||l[f]||d[f]||i;return t?r.createElement(m,a(a({ref:n},p),{},{components:t})):r.createElement(m,a({ref:n},p))}));function f(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=l;var s={};for(var u in n)hasOwnProperty.call(n,u)&&(s[u]=n[u]);s.originalType=e,s.mdxType="string"==typeof e?e:o,a[1]=s;for(var c=2;c<i;c++)a[c]=t[c];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}l.displayName="MDXCreateElement"},9084:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>u,contentTitle:()=>a,default:()=>d,frontMatter:()=>i,metadata:()=>s,toc:()=>c});var r=t(7462),o=(t(7294),t(3905));const i={},a=void 0,s={unversionedId:"references/tokens/router",id:"references/tokens/router",title:"router",description:"Tramvai tokens used for integration and extending routing module.",source:"@site/tmp-docs/references/tokens/router.md",sourceDirName:"references/tokens",slug:"/references/tokens/router",permalink:"/docs/references/tokens/router",draft:!1,editUrl:"https://github.com/tramvaijs/tramvai/-/edit/master/docs/tmp-docs/references/tokens/router.md",tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"render",permalink:"/docs/references/tokens/render"},next:{title:"server",permalink:"/docs/references/tokens/server"}},u={},c=[{value:"Tokens",id:"tokens",level:2}],p={toc:c};function d({components:e,...n}){return(0,o.kt)("wrapper",(0,r.Z)({},p,n,{components:e,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Tramvai tokens used for integration and extending routing module."),(0,o.kt)("h2",{id:"tokens"},"Tokens"),(0,o.kt)("p",null,(0,o.kt)("pre",{parentName:"p"},(0,o.kt)("code",{parentName:"pre",className:"language-typescript"},"import { createToken } from '@tinkoff/dippy';\nimport type {\n  AbstractRouter,\n  NavigationGuard,\n  Route,\n  Navigation,\n  NavigationRoute,\n  NavigateOptions,\n  UpdateCurrentRouteOptions,\n  HistoryOptions,\n  RouteConfig,\n  RouterPlugin,\n} from '@tinkoff/router';\nimport type { TramvaiComponent } from '@tramvai/react';\n\n/**\n * @description\n * Token to access the router instance\n */\nexport const ROUTER_TOKEN = createToken<AbstractRouter>('router router');\n\n/**\n * @description\n * Token for defining static routes\n */\nexport const ROUTES_TOKEN = createToken<Route | Route[]>('router routes', { multi: true });\n\n/**\n * @description\n * Token for providing guard handlers for page transitions\n */\nexport const ROUTER_GUARD_TOKEN = createToken<NavigationGuard>('router guard', { multi: true });\n\n/**\n * @description\n * Encapsulates the logic of working with the router - contains methods for getting the configuration of the route and performing navigation\n */\nexport const PAGE_SERVICE_TOKEN = createToken<PageService>('router pageService');\n\n/**\n * @description\n * Managers registration for additions related to pages and bundles\n */\nexport const PAGE_REGISTRY_TOKEN = createToken<PageRegistry>('router pageRegistry');\n\n/**\n * @description\n * Hook to resolve route dynamically\n */\nexport const ROUTE_RESOLVE_TOKEN = createToken<RouteResolve>('router routeResolve');\n\n/**\n * @description\n * Hook to transform route config\n */\nexport const ROUTE_TRANSFORM_TOKEN = createToken<RouteTransform>('router routeTransform', {\n  multi: true,\n});\n\n/**\n * @description\n * Flag for SPA-transitions, indicating that actions must be executed before or after a route update in the stor\n */\nexport const ROUTER_SPA_ACTIONS_RUN_MODE_TOKEN = createToken<'before' | 'after'>(\n  'router spaRunMode'\n);\n\nexport const LINK_PREFETCH_MANAGER_TOKEN =\n  createToken<LinkPrefetchManager>('link prefetch manager');\n\nexport const LINK_PREFETCH_HANDLER_TOKEN = createToken<(route: Route) => Promise<void>>(\n  'link prefetch handler',\n  { multi: true }\n);\n\nexport const ROUTER_MODE_TOKEN = createToken<'spa' | 'no-spa'>('router mode');\n\nexport type PageServiceComponentType =\n  | 'page'\n  | 'layout'\n  | 'nestedLayout'\n  | 'header'\n  | 'footer'\n  | 'errorBoundary';\n\nexport interface PageService {\n  getCurrentRoute(): NavigationRoute;\n  getCurrentUrl(): ReturnType<AbstractRouter['getCurrentUrl']>;\n  getConfig(route?: Route): RouteConfig;\n  getContent(route?: Route): Record<string, any>;\n  getMeta(route?: Route): RouteConfig['meta'];\n\n  navigate(options: string | NavigateOptions): Promise<void>;\n  updateCurrentRoute(options: UpdateCurrentRouteOptions): Promise<void>;\n  back(options?: HistoryOptions): Promise<void>;\n  forward(): Promise<void>;\n  go(to: number, options?: HistoryOptions): Promise<void>;\n\n  addComponent(name: string, component: TramvaiComponent, route?: Route): void;\n  getComponent(name: string, route?: Route): TramvaiComponent | undefined;\n\n  resolveComponentFromConfig(\n    property: PageServiceComponentType,\n    route?: Route\n  ): TramvaiComponent | undefined;\n}\n\nexport interface PageRegistry {\n  resolve(route: Route): Promise<void>;\n}\n\nexport type RouteResolve = (navigation: Navigation) => Promise<Route | void>;\n\nexport type RouteTransform = (route: Route) => Route;\n\nexport interface LinkPrefetchManager {\n  prefetch(url: string): Promise<void>;\n}\n\n/**\n * @description\n * Token to provide router plugins\n */\nexport const ROUTER_PLUGIN = createToken<RouterPlugin>('router plugin', { multi: true });\n\n"))))}d.isMDXComponent=!0}}]);